//  Copyright 2008 Narragansett Technologies.  All Rights Reserved.
var advancedLogicDebug = false;
var surveyPageLoadedScriptRunning = false;
var pageLoading = false;
var aNum = 11;
var aPart = aNum / 100;
var aWhole = aNum * 100;
var aRes = aWhole + aPart;
var aLocaleRes = aRes.toLocaleString(); // 1,000.10
var groupSep = aLocaleRes.substr(1, 1);
var decSep = aLocaleRes.substr(5, 1);
if (groupSep == '0' | groupSep == '1')
    groupSep = ',';
if (decSep == '0' | decSep == '1')
    decSep = '.';
var aCustomVal = new Array()
var cErrors = new Array('', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '');
var cErrorsObj = new Array('', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '');
var cErrorsType = new Array('', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '');
var cErrorsCount = 0;
var ErrorStyleType = 0;
var ErrorStyleFormsType = 10;
var m_BlueButtons = false;
var heatmap;
//var m_briteVerifyOkStatus =     '<a class="material-icons" href="#" style="color:#96AE36;font-size:1.5em">&#xE876;</a>';
//var m_briteVerifyFailedStatus = '<a class="material-icons" href="#" style="color:#B21F17;font-size:1.5em">&#xE000;</a>';
var m_briteVerifyOkStatus = '<img class="bvImage" src="../Images/Survey/ic_done.png"/>';
var m_briteVerifyFailedStatus = '<img  class="bvImage bvImageError" src="../Images/Survey/ic_error.png"/>';

//custom functions + return values
var cErrorsFunctions = new Array('', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '');
var cErrorsFunctionsEval = new Array(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
//
function reDirect(url) {	//Call client validation if it exista
    //alert(url);
    if (url.length > 0)
        document.forms[0].action += '?newurl=' + url;
    if (HTMLFields)
        copyHTMLFields(); // Copy HTML Fields to Hidden Fields
    document.forms[0].submit();
    //FIX FOR IE5
    if (navigator.appName == 'Microsoft Internet Explorer')
        if (event) event.returnValue = false;
    return false;
}
function positionToButtons() {
    if (ErrorStyleType == 0)
      try { getElement('Buttons').focus(); } catch (e) { } //try to find button table and position to there
    //else
    //  try {window.location.hash = "ErrLoc_1";} catch (e) { } //position to first error scroll
}
//
function showImage(e, aName, Show, aObj, ofsettop, ofsetleft) {
    try {
        if (Show) {
            if (!e)
                e = window.event
            cPosition = getPosition(e);
            getElement(aName).style.top = cPosition.y + ofsettop;
            getElement(aName).style.left = cPosition.x + ofsetleft;
            getElement(aName).style.display = '';
        }
        else
            getElement(aName).style.display = 'none';
    } catch (e) { }
}
function getPosition(e) {
    e = e || window.event;
    var cursor = { x: 0, y: 0 };
    if (e.pageX || e.pageY) {
        cursor.x = e.pageX;
        cursor.y = e.pageY;
    }
    else {
        var de = document.documentElement;
        var b = document.body;
        cursor.x = e.clientX +
            (de.scrollLeft || b.scrollLeft) - (de.clientLeft || 0);
        cursor.y = e.clientY +
            (de.scrollTop || b.scrollTop) - (de.clientTop || 0);
    }
    return cursor;
}
var one_day = 1000 * 60 * 60 * 24
var one_month = 1000 * 60 * 60 * 24 * 30
var one_year = 1000 * 60 * 60 * 24 * 30 * 12
function calcAge(yr, mon, day, unit, decimal, round) {
    today = new Date();
    var pastdate = new Date(yr, mon - 1, day);
    var countunit = unit;
    var decimals = decimal;
    var rounding = round;
    var rvalue = 0;
    finalunit = (countunit == "days") ? one_day : (countunit == "months") ? one_month : one_year;
    decimals = (decimals <= 0) ? 1 : decimals * 10;
    if (unit != "years") {
        if (rounding == "rounddown")
            rvalue = (Math.floor((today.getTime() - pastdate.getTime()) / (finalunit) * decimals) / decimals);
        else
            rvalue = (Math.ceil((today.getTime() - pastdate.getTime()) / (finalunit) * decimals) / decimals);
    }
    else {
        yearspast = today.getFullYear() - yr - 1;
        tail = (today.getMonth() > mon - 1 || today.getMonth() == mon - 1 && today.getDate() >= day) ? 1 : 0;
        pastdate.setFullYear(today.getFullYear());
        pastdate2 = new Date(today.getFullYear() - 1, mon - 1, day);
        tail = (tail == 1) ? tail + Math.floor((today.getTime() - pastdate.getTime()) / (finalunit) * decimals) / decimals : Math.floor((today.getTime() - pastdate2.getTime()) / (finalunit) * decimals) / decimals;
        rvalue = (yearspast + tail);
    }
    return rvalue;
}
function initRadioTextBox(aName, Ans) {
    if (getElementByName(aName)) {
        var ix = 0;
        var found = false
        if (getElementByName(aName).length) {
            while (ix < getElementByName(aName).length) {

                answerID = 'GText_' + getElementByName(aName)[ix].value.substring(0, 36);
                if (getElementByName(aName)[ix].value != Ans) {
                    if (getElement(answerID)) {
                        getElement(answerID).value = '';
                        getElement(answerID).disabled = true;
                    }
                }
                else {
                    try {
                        if (getElement(answerID))
                            getElement(answerID).disabled = false;
                        else {
                            //trim any spare chars on the end
                            answerID = 'GText_' + getElement(aName).value.substring(0, 36);
                            if (getElement(answerID))
                                getElement(answerID).disabled = false;
                        }
                    } catch (e) { }
                }
                ix++;
            }
        }
        else {
            if (getElement(aName).value != Ans) {
                answerID = 'GText_' + getElement(aName).value.substring(0, 36);
                if (getElement(answerID)) {
                    getElement(answerID).value = '';
                    getElement(answerID).disabled = true;
                }
                else {
                    if (getElement(answerID))
                        getElement(answerID).disabled = false;
                }
            }
            else {
                answerID = 'GText_' + getElement(aName).value.substring(0, 36);
                if (getElement(answerID))
                    getElement(answerID).disabled = false;
            }
        }
    }
}
function setRadio(aName, aValue) {
    if (getElementByName(aName)) {
        var ix = 0;
        var found = false
        if (getElementByName(aName).length) {
            while (ix < getElementByName(aName).length && !found) {
                if (getElementByName(aName)[ix].value == aValue) {
                    getElementByName(aName)[ix].checked = true;
                    found = true;
                }
                ix++;
            }
        }
        else {
            if (getElement(aName)) {
                if (getElement(aName).value == aValue)
                    getElement(aName).checked = true;
            }
            else {
                if (getElementByName(aName).value == aValue)
                    getElementByName(aName).checked = true;
            }
        }
    }
}
function Querystring(decode) {
    // get the query string, ignore the ? at the front.
    //var querystring = location.search.substring(1, location.search.length);
    var querystring = window.location.href.slice(window.location.href.indexOf('?') + 1);
    // parse out name/value pairs separated via &amp;
    var args = querystring.split('&');
    // split out each name = value pair
    for (var i = 0; i < args.length; i++) {
        var pair = args[i].split('=');
        // Fix broken unescaping
        if (decode) {
            temp = unescape(pair[0].toLowerCase()).split('+');
            name = temp.join(' ');
        }
        else {
            temp = pair[0].toLowerCase();
            name = temp;
        }

        if (decode) {
            temp = unescape(pair[1]).split('+');
            value = temp.join(' ');
        }
        else {
            temp = pair[1];
            value = temp;
        }
        this[name] = value;
    }
    this.get = Querystring_get;
}
function Querystring_get(strKey, strDefault) {
    var value = this[strKey.toLowerCase()];
    if (value == null || value.toLowerCase() == 'undefined') {
        value = '';
    }
    if (value.length == 0 && strDefault.length > 0)
        value = strDefault;
    return value;
}
//set email/first last names if passed to survey in query string
function setDefaultFields() {
    var qs = new Querystring(true);
    try {
            if (getElement('__EM').value.length > 0)
                getElement('ext_EmailAddress').value = getElement('__EM').value;
    } catch (e) { }
    try {
            if (qs.get('EM', '').length > 0)
                getElement('ext_EMailAddress').value = qs.get('EM', ''); 
    } catch (e) { }
    //Default any other values all should begin with ext_
    var querystring = location.search.substring(1, location.search.length);
    // parse out name/value pairs separated via &amp;
    var args = querystring.split('&');
    user1 = ''; user2 = ''; user3 = ''; user4 = ''; user5 = ''; email = ''; firstname = ''; lastname = ''; mlcode = '';
    // split out each name = value pair
    for (var i = 0; i < args.length; i++) {
        var pair = args[i].split('=');

        if (pair.length = 2) {

            temp = unescape(pair[0]).split('+');
            name = temp.join(' ');
            temp = unescape(pair[1]).split('+');
            value = temp.join(' ');
            if (name.toLowerCase().indexOf('ml') > -1 ||
                name.toLowerCase().indexOf('ext_') > -1 || name.toLowerCase() == 'em' ||
                name.toLowerCase().indexOf('dropdown_') > -1) {
                try {
                    try { getElement(name).value = value; } catch (e) { };
                    if (pair[1].length > 0) {
                        if (name.toLowerCase() == 'ext_user1' || name.toLowerCase() == 'u1')
                            user1 = unescape(pair[1]);
                        if (name.toLowerCase() == 'ext_user2' || name.toLowerCase() == 'u2')
                            user2 = unescape(pair[1]);
                        if (name.toLowerCase() == 'ext_user3' || name.toLowerCase() == 'u3')
                            user3 = unescape(pair[1]);
                        if (name.toLowerCase() == 'ext_user4' || name.toLowerCase() == 'u4')
                            user4 = unescape(pair[1]);
                        if (name.toLowerCase() == 'ext_user5' || name.toLowerCase() == 'u5')
                            user5 = unescape(pair[1]);
                        if (name.toLowerCase() == 'em')
                            email = unescape(pair[1]);
                        if (name.toLowerCase() == 'ext_emailaddress')
                            email = unescape(pair[1]);
                        if (name.toLowerCase() == 'ext_firstname' || name.toLowerCase() == 'fn')
                            firstname = unescape(pair[1]);
                        if (name.toLowerCase() == 'ext_lastname' || name.toLowerCase() == 'ln')
                            lastname = unescape(pair[1]);
                        if (name.toLowerCase() == 'ml')
                            mlcode = unescape(pair[1]);
                        if (name.toLowerCase().indexOf('dropdown_') > -1)
                            setDropDown(getElement(name), unescape(pair[1]));
                    }
                }
                catch (e) { }
                try
				{ getElement('rt_' + name).innerHTML = value; }
                catch (e) { }
            }
        }
    }
    //Substitute link values
    SubLinkValues(user1, user2, user3, user4, user5, email, firstname, lastname, mlcode);
}
function setDropDown(aObj, textValue) {

    TextVal = Trim1(textValue.toLowerCase());
    for (ix = 0; ix < aObj.length; ix++) {
        dropText = Trim1(aObj[ix].text.toLowerCase());
        if (dropText == TextVal) {

            aObj[ix].selected = true;
        }
    }
}
function setFileUpload(qId) {
}
function setDropDownByVal(aObj, textValue) {

    TextVal = Trim1(textValue.toLowerCase());
    for (ix = 0; ix < aObj.length; ix++) {
        dropText = Trim1(aObj[ix].value.toLowerCase());
        dropTexta = dropText.split(':');
        if (dropTexta.length > 1)
            dropText = dropTexta[0]
        if (TextVal.indexOf(dropText) > -1) {
            aObj[ix].selected = true;
            break;
        }
    }
}
function setDropDownRT(aObjName, textValue) {
    try {
        aObj = getElement(aObjName);
        TextVal = Trim1(textValue.toLowerCase());
        for (ix = 0; ix < aObj.length; ix++) {
            dropText = Trim1(aObj[ix].value.toLowerCase());
            if (dropText.indexOf(TextVal)>-1) {
                aObj[ix].selected = true;
                if (aObj.onchange)
                    aObj.onchange();
            }
        }
    }
    catch (e) { }
}
function setInputMx(aObjName, textValue) {
    try {
        //aObjc = getElement(aObjName); does not return a collection in non ie browsers...
        aObjc = document.getElementsByName(aObjName);
        collection = false;
        //get correct element from the collection 90%
        try {
            if (aObjc.length)
                collection = true;
        }
        catch (e) { }
        //check data type
        if (collection) {
            values = textValue.split('-');
            for (iy = 0; iy < aObjc.length; iy++) {
                setValue = '';
                if (iy <= values.length)
                    setValue = values[iy];
                aObj = aObjc[iy];
                switch (aObj.tagName.toLowerCase()) {
                    case "select":
                        textValues = textValue.split(':');
                        TextVal = Trim1(textValue.toLowerCase());
                        for (ix = 0; ix < aObj.length; ix++) {
                            for (ix = 0; ix < aObj.length; ix++) {
                                dropText = Trim1(aObj[ix].text.toLowerCase());
                                if (dropText == setValue) {
                                    aObj[ix].selected = true;
                                    if (aObj.onchange)
                                        aObj.onchange();
                                }
                            }
                        }
                        break;
                    default:
                        aObj.value = setValue;
                        break;
                }
            }
        }
    }
    catch (e) { }
}
//
function setInputMxRT(aObjName, Col, textValue) {
    try {
        aObj = getElement(aObjName);
        //get correct element from the collection 90%
        try
        { aObj = aObj[Col]; }
        catch (e) { aObj = getElement(aObjName); }
        //check data type
        switch (aObj.tagName.toLowerCase()) {
            case "select":
                TextVal = Trim1(textValue.toLowerCase());
                for (ix = 0; ix < aObj.length; ix++) {
                    for (ix = 0; ix < aObj.length; ix++) {
                        dropText = Trim1(aObj[ix].text.toLowerCase());
                        if (dropText == TextVal) {
                            aObj[ix].selected = true;
                            if (aObj.onchange)
                                aObj.onchange();
                        }
                    }
                }
                break;
            default:
                aObj.value = textValue;
                break;
        }
    }
    catch (e) { }
}
//
function setCheckBoxRT(aObjName, textValue) {
    try {
        aObj = getElement(aObjName);
        TextVal = Trim1(textValue.toLowerCase());
        for (ix = 0; ix < aObj.length; ix++) {
            dropText = Trim1(aObj[ix].value.toLowerCase());
            if (dropText == TextVal)
                aObj[ix].click();
        }
    }
    catch (e) { }
}
//Sub link place holders
function SubLinkValues(user1, user2, user3, user4, user5, email, firstname, lastname, mlcode) {

    var Regx = /{.*}/;
    var newLink = '';
    for (ix = 0; ix < document.links.length; ix++) {
        if (Regx.test(document.links[ix])) {
            document.links[ix].href = document.links[ix].href.replace('%7b', '{').replace('%7d', '}');
            href = document.links[ix].href;
            newhref = '';
            var subVar = document.links[ix].toString().match(/{(.)*?}/g);
            for (iy = 0; iy < subVar.length; iy++) {
                switch (subVar[iy].toLowerCase()) {
                    case '{em}':
                    case '{email}':
                    case '{emailaddress}':
                    case '{ext_emailaddress}':
                    case '{personalemail}':
                        if (email.length == 0 && getElement('__EM'))
                            email = getElement('__EM').value;
                        newhref = href.replace(subVar[iy], email);
                        href = newhref;
                        break;
                    case '{ext_user1}':
                    case '{user1}':
                    case '{u1}':
                        if (user1.length == 0 && getElement('__User1'))
                            user1 = getElement('__User1').value;
                        newhref = href.replace(subVar[iy], user1);
                        href = newhref;
                        break;
                    case '{ext_user2}':
                    case '{user2}':
                    case '{u2}':
                        if (user2.length == 0 && getElement('__User2'))
                            user2 = getElement('__User2').value;
                        newhref = href.replace(subVar[iy], user2)
                        href = newhref;
                        break;
                    case '{ext_user3}':
                    case '{user3}':
                    case '{u3}':
                        if (user3.length == 0 && getElement('__User3'))
                            user3 = getElement('__User3').value;
                        newhref = href.replace(subVar[iy], user3)
                        href = newhref;
                        break;
                    case '{ext_user4}':
                    case '{user4}':
                    case '{u4}':
                        if (user4.length == 0 && getElement('__User4'))
                            user4 = getElement('__User4').value;
                        newhref = href.replace(subVar[iy], user4)
                        href = newhref;
                        break;
                    case '{ext_user5}':
                    case '{user5}':
                    case '{u5}':
                        if (user5.length == 0 && getElement('__User5'))
                            user5 = getElement('__User5').value;
                        newhref = href.replace(subVar[iy], user5)
                        href = newhref;
                        break;
                    case '{ext_firstname}':
                    case '{firstname}':
                    case '{fn}':
                        if (firstname.length == 0 && getElement('__FirstName'))
                            firstname = getElement('__FirstName').value;
                        newhref = href.replace(subVar[iy], firstname)
                        href = newhref;
                        break;
                    case '{ext_lastname}':
                    case '{lastname}':
                    case '{ln}':
                        if (lastname.length == 0 && getElement('__LastName'))
                            lastname = getElement('__LastName').value;
                        newhref = href.replace(subVar[iy], lastname)
                        href = newhref;
                        break;
                    case '{ml}':
                    case '{multilang}':
                        if (mlcode.length == 0 && getElement('__ML'))
                            mlcode = getElement('__ML').value;
                        newhref = href.replace(subVar[iy], mlcode);
                        href = newhref;
                        break;
                    case '{zip}':
                        if (getElement('__Zip'))
                            newhref = href.replace(subVar[iy], getElement('__Zip').value);
                        href = newhref;
                        break;
                    case '{state}':
                        if (getElement('__State'))
                            newhref = href.replace(subVar[iy], getElement('__State').value);
                        href = newhref;
                        break;
                    default:
                        break;
                }
            }
            if (newhref.length > 0)
                document.links[ix].href = newhref;
        }
    }
}

var res;
//Validate rank question
function ValRankQuestion(QuestionId, QuestionText, CtlValue, LineNo, Ctl) {
    itemCount = 0;
    rok = true;
    unRanked = '';
    CtlArray = Ctl.split('|');
    if (!checkHidden('lbl_' + QuestionId, LineNo)) {
        hiddenElements = 0;
        for (ih = 0; ih < CtlArray.length; ih++) {
            if (checkHiddenAnsLine(CtlArray[ih].replace('RankQ_', 'ARow')))
                hiddenElements++;
        }
        visibleElements = CtlArray.length - hiddenElements;
        //less elements displayed than are required to rank
        if (visibleElements < CtlValue) {
            CtlValue = visibleElements;
        }
        //
        var CtlV = new Array(parseInt(CtlValue));
        intVal = -1;
        for (im = 0; im < CtlV.length; im++)
            CtlV[im] = im + 1;
        //

        for (im = 0; im < CtlArray.length; im++) {
            inputValue = getElement(CtlArray[im]).value;
            try {
                if (SurveyForm.isNumber(inputValue)) {
                    intVal = parseInt(inputValue);
                    if (isNaN(intVal)) {
                        getElement(CtlArray[im]).value = "";
                        intVal = 0;
                    }
                    else
                        getElement(CtlArray[im]).value = intVal;
                }
                else
                    intVal = 0;
            }
            catch (e) { intVal = 0; }
            //
            if (intVal != 0) {
                itemCount++;
                if (((intVal - 1) < CtlV.length) && intVal != -1) {
                    if (CtlV[intVal - 1] == -1)
                        CtlV[intVal - 1] = -2;
                    else
                        CtlV[intVal - 1] = -1;
                }
            }
        }

        unRankedDup = "";
        for (im = 0; im < CtlV.length; im++) {
            //-2 means duplicate entry
            if (CtlV[im] != -1 && CtlV[im] != -2) {
                unRanked = unRanked + CtlV[im] + " ";
                rok = false;
            }
            if (CtlV[im] == -2) {
                unRankedDup = unRankedDup + CtlV[im] + " ";
                rok = false;
            }
        }
    }
    else {
        for (im = 0; im < CtlArray.length; im++)
            getElement(CtlArray[im]).value = '';
    }
    if (itemCount > CtlValue)
        rok = false;
    if (!rok) {
        if (unRanked.length > 0) {
            res = res + setErrorRank(QuestionId, QuestionText, unRanked);
            setQuestionTextColor(QuestionId, SurveyErrorDec);
        }
        if (unRankedDup.length > 0) {
            res = res + setErrorRankDup(QuestionId, QuestionText, '');
            setQuestionTextColor(QuestionId, SurveyErrorDec);
        }
        if (itemCount > CtlValue) {

            res = res + setErrorExtraRank(QuestionId, QuestionText, '', CtlValue);
            setQuestionTextColor(QuestionId, SurveyErrorDec);
        }
    }
    else
        setQuestionTextColor(QuestionId, '');

    return rok;
}
//Validate rank question
function ValRankQuestionSort(QuestionId, QuestionText, CtlValue, LineNo, Ctl) {
    itemCount = 0;
    rok = true;
    unRanked = '';
    CtlArray = getElement(Ctl).value.split('|');
    if (!checkHidden('lbl_' + QuestionId, LineNo)) {
        if (CtlArray.length != CtlValue) {
            res = res + setErrorRankSort(QuestionId, QuestionText, SurveyunRankedSort);
            setQuestionTextColor(QuestionId, SurveyErrorDec);
            rok = false;
        }
    }
    return rok;
}
// compatibility for other browsers.
function getElement(elementx) {
    var elem;
    if (navigator.appName == 'Microsoft Internet Explorer')
        elem = document.all(elementx);
    else {
        if (navigator.appName == 'Opera') {
            elem = document.getElementById(elementx);
            if (elem == null)
                elem = document.getElementsByName(elementx);
            if (elem == null) // get element by index number
                elem = document.forms[0].elements[elementx];
        }
        else {
            elem = document.getElementById(elementx);
            if (elem == null) // get element by index number
                elem = document.forms[0].elements[elementx];
            if (elem == null) {
                elem = document.getElementsByName(elementx); //returns a array
                if (elem.length == 0) //if array empty return null
                    elem = document.getElementById(elementx);
            }
        }
    }
    return elem;
}
// compatibility for other browsers.
function getElementDiv(elementx) {
    var elem;

    if (navigator.appName == 'Microsoft Internet Explorer')
        elem = document.all(elementx);
    else
        elem = document.layers[elementx];
    return elem;
}
//Register filter event used for questions which subscribe
function regFilterEvent(ansId, fun) {
    elName = 'Check_' + ansId
    if (window.addEventListener) {
        getElement(elName).addEventListener('click', fun, false);
    }
    else
        getElement(elName).attachEvent('onclick', fun);

}
//Check if object is hidden
function checkHidden(aSrc, LineNo) {
    notVisible = false;
    aSrc = getElement("M_" + LineNo);
    if (aSrc != null) {
        if (aSrc.className.toLowerCase() == 'hidepanel')
            notVisible = true;
        if (aSrc.style.display.toLowerCase() == 'none') {
            notVisible = true;

        }
    }
    return notVisible;
}
//Check if object is hidden
function checkHiddenLine(LineId) {
    notVisible = false;
    aSrc = getElement(LineId);
    if (aSrc != null) {
        if (aSrc.className.toLowerCase() == 'hidepanel')
            notVisible = true;
        if (aSrc.style.display.toLowerCase() == 'none') {
            notVisible = true;

        }
    }
    return notVisible;
}
function toggleCmtBox(aObj, cmtBoxId, Type, GroupId, MaxIndex) {
    //    radioButtons = getElementByName(GroupId.replace("GTextL","RadioL"));
    //    for (var ix = 0; ix <= radioButtons.length; ix++) {
    //        abc = radioButtons[ix];
    //    }
    if (aObj.checked) {
        try { getElement(cmtBoxId).style.display = '' } catch (e) { };
    }
    else {
        try { getElement(cmtBoxId).style.display = 'none' } catch (e) { };
    }
}
function toggleCmtBoxOff(aObj, cmtBoxId, Type, GroupId, MaxIndex) {
    switch (Type) {
        case "LikertText":
            for (var ix = 0; ix <= MaxIndex; ix++) {
                try { getElement(GroupId + "_" + ix).style.display = 'none' } catch (e) { };
            }
            break;
    }
}
function toggleCmtBoxOff1(aObj, cmtBoxId, Type, GroupId, MaxIndex) {
    switch (Type) {
        case "LikertText":
            for (var ix = 0; ix <= MaxIndex; ix++) {
                try { getElement(GroupId + "_" + ix).disabled = true } catch (e) { };
            }
            break;
    }
}
function toggleCmtBox1(aObj, cmtBoxId, Type, GroupId, MaxIndex) {
    if (aObj.checked) {
        try { getElement(cmtBoxId).disabled = false } catch (e) { };
    }
    else {
        try {
            getElement(cmtBoxId).disabled = true;
            getElement(cmtBoxId).focus();
        } catch (e) { };
    }
}
function setHiddenElements() {
    //do not clear questions on this line if hidden
    suppressList = getElement('__InitHiddenQ').value;
    for (var ix = 1; ix < 200; ix++) {
        aObj = getElement('M_DetailsLine' + ix)
        if (aObj && aObj.id != undefined) {
            if (suppressList.indexOf(aObj.id + '|') == -1) {
                if (checkHidden(null, 'DetailsLine' + ix)) //if survey lind hidden init all elements on this line
                    initHiddenElements(aObj);
            }
        }
        else
            break;
    }
}
function initHiddenElementsByLine(ObjList)//initialize hidden elements
{
    lineList = ObjList.split(',');
    if (lineList.length > 0) {
        for (var ix = 0; ix < lineList.length; ix++) {
            if (checkHiddenLine(lineList[ix])) {
                if (getElement(lineList[ix]))
                    initHiddenElements(getElement(lineList[ix]));
            }
        }
    }
}
function initHiddenElements(aObj)//initialize hidden elements
{
    //do not initialize if previous button hit 
    if (pageLoading && document.referrer.length == 0)
        return;
    for (var ix = 0; ix < aObj.childNodes.length; ix++) {
        aSrc = aObj.childNodes[ix];
        switch (aSrc.tagName) {
            case "INPUT":
                switch (aSrc.type) {
                    case "checkbox":
                    case "radio":
                        if (m_BlueButtons)
                        {
                            if (aSrc.checked)
                                $("#" + aSrc.id).iCheck('uncheck');
                        }
                        else
                          aSrc.checked = false;
                        break;
                    case "text":
                        pfx = getFieldNamePfx(aSrc).toLowerCase();
                        if (pfx == 'shortfreetext_')
                            aSrc.value = '';
                        break;
                }
                break;
            case "TEXTAREA":
                break;
            case "SELECT":
                if (aSrc.length > 0)
                    aSrc[0].selected = true;
                break;
        }
        initHiddenElements(aSrc);
    }
}
function getFieldNamePfx(aObj) {
    rValue = '';
    var Regx = /.*_/;
    pfx = Regx.exec(aObj.name);
    try { if (pfx[0]) rValue = pfx[0]; } catch (e) { }
    return rValue;
}
//Check if object is hidden allocation question
function checkHiddenAnsLine(ObjId) {
    notVisible = false;
    var aSrc = getElement(ObjId);
    //can be null for merge question rank and likert text
    if (aSrc != null) {
        if (aSrc.className) {
            if (aSrc.className.toLowerCase() == 'hidepanel' || aSrc.style.display == 'none')
                notVisible = true;
        }
        if (aSrc.style.display.toLowerCase() == 'none')
            notVisible = true;
    }
    
    return notVisible;
}
//Check if object is hidden allocation question
function checkHidden1(Obj, LineNo) {
    var aSrc = getElement(Obj);
    return checkHidden(Obj, LineNo)
}
//Check if object is hidden allocation question
function checkHidden2(aSrc, LineNo) {
    notVisible = false;
    if (aSrc != null) {
        while (aSrc != null & !notVisible) {
            try {
                if (aSrc.id.toLowerCase().indexOf('detailsline') != -1 &
				aSrc.id.toLowerCase().indexOf('col') == -1) {
                    if (aSrc.className.toLowerCase() == 'hidepanel')
                        notVisible = true;
                    if (aSrc.style.display.toLowerCase() == 'none')
                        notVisible = true;
                }
            }
            catch (e) { }
            aSrc = getParent(aSrc);
        }
    }
    return notVisible;
}
function getParent(aObj) {
    var elem = null;
    if (navigator.appName == 'Microsoft Internet Explorer')
        elem = aObj.parentElement;
    else
        elem = aObj.parentNode;

    return elem;
}
function formatInt(aVal1) {
    var aVal = aVal1.toString().replace(groupSep, '');
    var aVal = aVal.replace(decSep, '.');
    var res = "";
    if (!isNaN(aVal) && aVal.length > 0) {
        var aNum = Math.round(aVal * 100) / 100;
        var intPart = parseInt(aNum);
        var intStr = intPart.toString();
        var iy = 0;
        var aComma = "";
        for (var ix = 1; ix <= intStr.length; ix++) {
            if (iy == 3) { iy = 0; aComma = groupSep; } else { iy++; aComma = "" }
            res = intStr.substr(intStr.length - ix, 1) + aComma + res;
        }
    }
    else
        res = aVal1;
    return res;
}

function Trim(s) {
    return s.replace(/^\s*|\s*$/g, '');
}
function Trim1(s) {
    return s.replace(/^[\s\xA0]+/, "").replace(/[\s\xA0]+$/, "");
}

function CheckFieldDefinition(aObj) {
    var aSrc = event.srcElement;
    if (aSrc == null)
        aSrc = aObj;

    switch (aSrc.tagName.toLowerCase()) {
        case "input":
            switch (aSrc.name.toLowerCase()) {
                case "ext_emailaddress":
                    valTF = 'false';

                    if (aSrc.length == 0)
                        valTF = 'true';
                    if (aSrc.value.indexOf('@') == -1)
                        valTF = 'true';
                    if (aSrc.value.indexOf('.') == -1)
                        valTF = 'true';
                    //
                    aSrc.required = valTF;
                    break;
                default:
                    switch (aSrc.type.toLowerCase()) {
                        case "text":
                            if (aSrc.length == 0)
                                valTF = 'true';
                            else
                                valTF = 'false';
                            aSrc.required = valTF;
                            break;
                        default:
                            break;
                    }
                    break;
            }
            break;
        case "select":
            aSrc.required = 'false'
            if (aSrc.options[aSrc.selectedIndex].value.length == 0)
                aSrc.required = 'true'
        default:
            break;
    }
}
// ============================================================================================
// Common Javascript
// ============================================================================================
function pageLoadFinishPage() {
    surveyPageLoadedScriptRunning = true;
    try {
        if (typeof surveyPageLoadedScript == 'function')
            surveyPageLoadedScript();
    } catch (e) { }
    surveyPageLoadedScriptRunning = false;
    //
    try {
        if (typeof PageLoadScript == 'function') {
            PageLoadScript();
        }
    } catch (e) { }

}
function pageLoad() {
    // Used to Restore the Status of the Page for Back Processing
    setHightWidth();
    pageLoading = true;
    //QuestionHideShowInitScript();
    var skip = true;
    for (var ix = 0; ix < document.forms[0].length; ix++) {
        if (document.forms[0][ix].tagName) {
            switch (document.forms[0][ix].tagName) {
                case "INPUT":
                    if (document.forms[0][ix].type == "button" || document.forms[0][ix].type == "submit")
                        skip = true;
                    else
                        skip = false;
                    break;
                case "TEXTAREA":
                case "SELECT":
                    skip = false;
                    break;
                default:
                    skip = true; break;
            }

            if (!skip) {
                if (document.forms[0][ix].onclick) { document.forms[0][ix].onclick() };
                if (document.forms[0][ix].onchange) { document.forms[0][ix].onchange() };
            }
        }
        
    }
    
    //call custom load routine
    surveyPageLoadedScriptRunning = true;
    try {
        if (surveyPageLoadedScript())
            surveyPageLoadedScript();
    } catch (e) { if (advancedLogicDebug) alert('SurveyPageLoadedScript script failed : ' + e.message); }
    surveyPageLoadedScriptRunning = false;
    //trigger click events on selected items used for previous button
    trg_HideShow();
    //show body after hide show is initialized
    getElement('bodyDiv').className = 'clsbodydivs';
    //set button style
    setButtonStyle(); //Order of initialization is important. If changing check exclusive checkbox
    //signify page loaded
    pageLoading = false;
}
function setButtonStyle() {
    //0 normal buttons __BtnStyle
    if (SurveyState.getValue("ntBtnStyle") != "0" &&
        SurveyState.getValue("ntBtnStyle").length > 0) {
        btnColor = "blue";
        if (SurveyState.getValue("ntBtnStyle") == "20")
            btnColor = "orange";
        if (SurveyState.getValue("ntBtnStyle") == "30")
            btnColor = "green";
        if (SurveyState.getValue("ntBtnStyle") == "40")
            btnColor = "grey";
        if (SurveyState.getValue("ntBtnStyle") == "50")
            btnColor = "pink";
        if (SurveyState.getValue("ntBtnStyle") == "60")
            btnColor = "purple";
        if (SurveyState.getValue("ntBtnStyle") == "70")
            btnColor = "red";
        if (SurveyState.getValue("ntBtnStyle") == "80")
            btnColor = "yellow";
        $(document).ready(function() {
            function callback_log(control, event) {
                switch (event.type) {
                    case 'ifClicked':
                        control.click();
                        break;
                }
            }; 
            $('.clsRadioStd').on('ifCreated ifClicked ifChanged ifChecked ifUnchecked ifDisabled ifEnabled ifDestroyed', function(event) {
                callback_log(this, event);
            }).iCheck({
                checkboxClass: 'icheckbox_square-' + btnColor + ' iradio_floatleft',
                radioClass: 'iradio_square-' + btnColor + ' iradio_floatleft',
                increaseArea: '20%'
            });
            $('.clsRadioLkt').on('ifCreated ifClicked ifChanged ifChecked ifUnchecked ifDisabled ifEnabled ifDestroyed', function(event) {
                callback_log(this, event);
            }).iCheck({
                checkboxClass: 'icheckbox_square-' +btnColor,
                radioClass: 'iradio_square-' +btnColor,
                increaseArea: '20%'
            });
            $('.clsRadioLrt').on('ifCreated ifClicked ifChanged ifChecked ifUnchecked ifDisabled ifEnabled ifDestroyed', function (event) {
                callback_log(this, event);
            }).iCheck({
                checkboxClass: 'icheckbox_square-' + btnColor,
                radioClass: 'iradio_square-' + btnColor,
                increaseArea: '20%'
            });
            m_BlueButtons = true;
        });
    }
}
function setHightWidth() {
    window.scrollbars = true;
    if (navigator.appName == 'Microsoft Internet Explorer') {
        if (getElement("M_Details")) {
            if (getElement("__Width")) {
                window.resizeTo(parseInt(getElement("__Width").value), parseInt(getElement("__Height").value)); //ReSize the Screen
                getElement("DetailsDiv").style.backgroundColor = getElement("M_Details").style.backgroundColor;
                getElement("DetailsDiv").style.height = getElement("M_Details").style.height;
                getElement("M_Details").style.height = "";
            }
            else {
                if (getElement("__StyleSheetName").length == 0) //if style sheet set do not set default widths
                {
                    getElement("DetailsDiv").style.height = getElement("M_Details").style.height;
                    getElement("DetailsDiv").style.width = getElement("M_Details").style.width;
                    getElement("M_Details").style.width = "100%";
                }
            }
        }
        else {
            if (getElement("__Width")) {
                window.resizeTo(parseInt(getElement("__Width").value), parseInt(getElement("__Height").value)); //ReSize the Screen
            }
        }
    }
    else {
        if (getElement("__Width"))
            window.resizeTo(parseInt(getElement("__Width").value), parseInt(getElement("__Height").value)); //ReSize the Screen
        //removed overflow
        if (navigator.appName == 'Microsoft Internet Explorer')
            getElement("detailsDiv").style = "BORDER-RIGHT:1px;BORDER-TOP:1px;BORDER-LEFT:1px;WIDTH:100%;BORDER-BOTTOM:1px;HEIGHT:90%";
    }
}
function setRadioExecClick(aName, aValue) {
    if (getElementByName(aName)) {
        var ix = 0;
        var found = false
        if (getElementByName(aName).length) {
            while (ix < getElementByName(aName).length && !found) {
                if (getElementByName(aName)[ix].value == aValue) {
                    getElementByName(aName)[ix].checked = true;
                    getElementByName(aName)[ix].onClick();
                    found = true;
                }
                ix++;
            }
        }
        else {
            if (getElement(aName).value == aValue)
                getElement(aName).checked = true;
        }
    }
}
function setRadio(aName, aValue) {
    if (getElementByName(aName)) {
        var ix = 0;
        var found = false
        if (getElementByName(aName).length) {
            while (ix < getElementByName(aName).length && !found) {
                if (getElementByName(aName)[ix].value == aValue) {
                    getElementByName(aName)[ix].checked = true;
                    found = true;
                }
                ix++;
            }
        }
        else {
            if (getElement(aName).value == aValue)
                getElement(aName).checked = true;
        }
    }
}
function setRadioRT(aName, aValue) {

    try {
        if (getElementByName(aName)) {
            var ix = 0;
            var found = false
            if (getElementByName(aName).length) {
                while (ix < getElementByName(aName).length && !found) {
                    if (getElementByName(aName)[ix].value == aValue) {
                        getElementByName(aName)[ix].click();
                        found = true;
                    }
                    ix++;
                }
            }
            else {
                if (getElement(aName).value == aValue)
                    getElement(aName).checked = true;
            }
        }
    } catch (e) { }
}
// get element for re-take of survey had try catch
function getElementRT(elementx) {
    var elem;

    if (navigator.appName == 'Microsoft Internet Explorer') {
        try { elem = document.all(elementx); } catch (e) { }
    }
    else {
        try {
            if (navigator.appName == 'Opera')
                elem = document.getElementById(elementx);
            else {
                elem = document.getElementById(elementx);
                if (elem == null) { // get element by index number
                    elem = document.forms[0].elements[elementx];
                    if (elem.length == 0) //empty array return null
                        elem = document.getElementById(elementx);
                }
            }
        }
        catch (e) { }
    }

    return elem;
}
var res;


// compatibility for other browsers.
function getElementDiv(elementx) {
    var elem;

    if (navigator.appName == 'Microsoft Internet Explorer') {
        elem = document.all(elementx);
    }
    else {

        elem = document.layers[elementx];
    }

    return elem;
}
function getFieldLabel(aSrc) {
    var fieldLabel = "";
    var firstChild = null;

    if (aSrc.title.length > 0)
        return aSrc.title; //Try to get field label from title
    else
        fieldLabel = aSrc.name; //Try to get field label
    if (!fieldLabel) {	//maybe a collection

        if (aSrc[0].title.length > 0)
            fieldLabel = aSrc[0].title;
        else
            fieldLabel = aSrc[0].name;
    }
    try {
        // Go From Left to Right and find the Label. Searches for the parent of the input box and takes the text from there
        if (aSrc.parentElement != null) {
            firstChild = aSrc.parentElement;
            if (aSrc.parentElement.parentElement != null) {
                for (var iy = 0; iy < aSrc.parentElement.parentElement.children.length; iy++) {
                    if (aSrc.parentElement.parentElement.children(iy) == firstChild)
                        iy = aSrc.parentElement.parentElement.children.length; // At the Field In Error
                    else
                        if (aSrc.parentElement.parentElement.children(iy).innerText != null)
                            fieldLabel = aSrc.parentElement.parentElement.children(iy).innerText;
                }
            }
        }
    } catch (e) { }
    return fieldLabel;
}
function setDot(Msg) {
    if (Msg.indexOf('?') == -1)
        return '.';
    else
        return '&nbsp;';
}
//Set error for question from advanced logic
function setError1AL(questionid, questionText) {
    aRes = '';
    aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			+ questionText + setDot(questionText) + '</a></u> &nbsp;</font></span></br>';
    return aRes;
}
function setErrorMsg(aSrc, Msg) {
    var aRes = "";
    idOrName = aSrc.name;
    fieldLabel = getFieldLabel(aSrc);
    if (ErrorStyleType == 10 && ErrorStyleFormsType==10) {
        if ($('#' + aSrc.id).length > 0) //id shoul dbe specifed on all input foields
            $('#' + aSrc.id).parents('.spDetailLineCol1:first').append('<span id="err_' + aSrc.id + '" class="errInline errInlineForm" style="display:block">' + fieldLabel + "&nbsp;" + Msg + '</span>');
        else
            $('input[name*="' + aSrc.name + '"]').parents('.spDetailLineCol1:first').append('<span id="err_' + aSrc.name + '" class="errInline errInlineForm" style="display:block">' + fieldLabel + "&nbsp;" + Msg + '</span>');
        //
        inLineErrorCount++;
        if (inLineErrorCount == 1) //scroll to first error
            scrollToFormError(aSrc.name)
        setFormElementStyle(aSrc.name);
    }
    else
    {
        if (fieldLabel.indexOf('GText') > -1)
            fieldLabel = 'Click to find error';
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"try {document.forms[0]." + aSrc.name + ".focus();} catch (e) {} return false;\">"
		    + fieldLabel + '.</a></u> &nbsp;' + Msg + '</font></span></br>';
    }
    return aRes;
}
function setFormElementStyle(elementId) {
    try {
        if ($("#" + elementId).length > 0)
            $("#" + elementId).addClass("errInlineFormElements");
        else
            $("input[name='" + elementId + "']").addClass("errInlineFormElements");

    } catch (e) { }
}
function rmvFormElementStyle(elementId) {
    try {
        if ($("#" + elementId).length > 0)
            $("#" + elementId).removeClass("errInlineFormElements");
        else
            $("input[name='" + elementId + "']").removeClass("errInlineFormElements");
    } catch (e) { }
}
function scrollToFormError(elementId)
{
    try {
        if ($(document).scrollTop($("#" + elementId).length > 0))
            $(document).scrollTop($("#" + elementId).offset().top);
        else
            $(document).scrollTop($("input[name='" + elementId + "']").offset().top);
       
    } catch (e) { }
}
function setError(aSrc) {
    inLineErrorCount++;
    var aRes = "";

    fieldLabel = getFieldLabel(aSrc);
    if (ErrorStyleType == 10 && ErrorStyleFormsType == 10) {
        if ($('#' + aSrc.id).length > 0) //id shoul dbe specifed on all input foields
            $('#' + aSrc.id).parents('.spDetailLineCol1:first').append('<span id="err_' + aSrc.id + '" class="errInline errInlineForm" style="display:block">' + fieldLabel + "&nbsp;" + SurveyRequired + '</span>');
        else
            $('input[name*="' + aSrc.name + '"]').parents('.spDetailLineCol1:first').append('<span id="err_' + aSrc.name + '" class="errInline errInlineForm" style="display:block">' + fieldLabel + "&nbsp;" + SurveyRequired + '</span>');
        setFormElementStyle(aSrc.name);
    }
    else {
        
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"try {document.forms[0]." + aSrc.name + ".focus();} catch (e) {} return false;\">"
            + fieldLabel + '.</a></u> &nbsp;' + SurveyRequired + '</font></span></br>';
    }
    return aRes;
}
function setErrorCnf(aSrc) {
    inLineErrorCount++;
    var aRes = "";
    fieldLabel = getFieldLabel(aSrc);
    if (ErrorStyleType == 10 && ErrorStyleFormsType == 10) {
        if ($('#' + aSrc.id).length > 0) //id shoul dbe specifed on all input foields
            $('#' + aSrc.id).parents('.spDetailLineCol1:first').append('<span id="err_' + aSrc.id + '" class="errInline errInlineForm" style="display:block">' + fieldLabel + "&nbsp;" + SurveyCnfRequired + '</span>');
        else
            $('input[name*="' + aSrc.name + '"]').parents('.spDetailLineCol1:first').append('<span id="err_' + aSrc.name + '" class="errInline errInlineForm" style="display:block">' + fieldLabel + "&nbsp;" + SurveyRequired + '</span>');
        setFormElementStyle(aSrc.name);
    }
    else {
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"try {document.forms[0]." + aSrc.name + ".focus();} catch (e) {} return false;\">"
            + fieldLabel + '.</a></u> &nbsp;' + SurveyCnfRequired + '</font></span></br>';
    }
    return aRes;
}

function formatIntA(aVal1) {
    var aVal = aVal1.value.toString().replace(groupSep, '').replace(decSep, '');
    aVal1.value = aVal;
    return aVal;
}
function disableEnterKey(e) {
    var key;
    if (window.event)
        key = window.event.keyCode; //IE
    else
        key = e.which; //firefox      

    return (key != 13);
}
function checkIfFilled(aQuestion, aObj) {
    var aSrc = event.srcElement;
    var aCount = 0;
    if (aSrc == null)
        aSrc = aObj;
    if (aSrc.tagName == "INPUT") {

        switch (aSrc.type) {
            case "checkbox":
                if (!getElement(aQuestion).checkCount)
                    getElement(aQuestion).checkCount = 0;
                aCount = getElement(aQuestion).checkCount;
                if (aSrc.checked) {
                    aCount++;
                    aSrc.priorValue = 1;
                }
                else {
                    if (aSrc.priorValue)
                        aCount--;
                }
                if (aCount > 0)
                    getElement(aQuestion).required = 'false';
                else
                    if (!pageLoading)
                    getElement(aQuestion).required = 'true';
                getElement(aQuestion).checkCount = aCount;
                break;
            case "text":

                if (!getElement(aQuestion).checkCount)
                    getElement(aQuestion).checkCount = 0;
                aCount = getElement(aQuestion).checkCount;
                if (aSrc.value.length > 0) {
                    if (aSrc.value != " ") {
                        aCount++;
                        aSrc.priorV = aSrc.value;
                    }
                    else {
                        if (aSrc.priorV)
                            aCount--;
                    }
                }
                else
                    if (aSrc.priorV)
                    aCount--;
                if (aCount > 0)
                    getElement(aQuestion).required = 'false';
                else
                    if (!pageLoading)
                    getElement(aQuestion).required = 'true';
                getElement(aQuestion).checkCount = aCount;

                // Numeric Totalling
                if (aSrc.priorValue) {
                    //if allocate amount is filled in must be required

                    var aVal = 0;
                    aSrc.value = aSrc.value.replace(decSep, '');
                    aSrc.value = aSrc.value.replace(groupSep, '');

                    if (aSrc.value.length == 0)
                        aVal = 0;
                    else
                        aVal = parseInt(aSrc.value);
                    aVal = aVal - aSrc.priorValue;
                    getElement(aQuestion).allocTotal = getElement(aQuestion).allocTotal - aVal;
                    if (parseInt(aSrc.value))
                        aSrc.priorValue = parseInt(aSrc.value);
                    if (getElement(aQuestion).allocTotal == 0)
                        getElement(aQuestion).required = 'false';
                    else
                        getElement(aQuestion).required = 'true';
                }
                break;
            case "radio":
                if (!getElementByName(aQuestion).checkCount)
                    getElementByName(aQuestion).checkCount = 0;
                aCount = getElementByName(aQuestion).checkCount;

                if (aSrc.checked)
                    getElementByName(aQuestion).required = 'false';
                if (aSrc.checked)
                    aCount++;
                if (!pageLoading & !aSrc.checked)
                    aCount--;
                getElementByName(aQuestion).checkCount = aCount; // Count radio buttons for Combination with Text Boxes	
                break;
            default: getElement(aQuestion).required = 'true'; break;
        }
    }
    else {
        if (aSrc.tagName == "SELECT") {
            if (aSrc.selectedIndex > -1) {
                if (!pageLoading)  //used to ensure events fired during page load do not affect validation
                    getElement(aQuestion).required = 'false';
            }
        }
        if (aSrc.tagName == "TEXTAREA") {
            if (!getElement(aQuestion).checkCount)
                getElement(aQuestion).checkCount = 0;
            aCount = getElement(aQuestion).checkCount;
            if (aSrc.value.length > 0) {
                if (aSrc.value != " ") {
                    aCount++;
                    aSrc.priorV = aSrc.value;
                }
                else {
                    if (aSrc.priorV)
                        aCount--;
                }
            }
            else
                if (aSrc.priorV)
                aCount--;
            if (aCount > 0)
                getElement(aQuestion).required = 'false';
            else
                if (!pageLoading)
                getElement(aQuestion).required = 'true';
            getElement(aQuestion).checkCount = aCount;
        }
    }
}
function Trim(s) {
    return s.replace(/^\s*|\s*$/g, '');
}
function CheckFieldDefinition(aObj) {
    var aSrc = event.srcElement;
    if (aSrc == null)
        aSrc = aObj;
    switch (aSrc.tagName.toLowerCase()) {
        case "input":
            switch (aSrc.name.toLowerCase()) {
                case "ext_emailaddress":
                    valTF = 'false';

                    if (aSrc.length == 0)
                        valTF = 'true';
                    if (aSrc.value.indexOf('@') == -1)
                        valTF = 'true';
                    if (aSrc.value.indexOf('.') == -1)
                        valTF = 'true';
                    //
                    aSrc.required = valTF;
                    break;
                default:
                    switch (aSrc.type.toLowerCase()) {
                        case "text":
                            if (aSrc.length == 0)
                                valTF = 'true';
                            else
                                valTF = 'false';
                            aSrc.required = valTF;
                            break;
                        default:
                            break;

                    }
                    break;
            }
            break;
        case "select":
            aSrc.required = 'false'
            if (aSrc.options[aSrc.selectedIndex].value.length == 0)
                aSrc.required = 'true'
        default:
            break;
    }
}
function pageEffect() {
    try {
        if (getElement('__Effect').value == '20')
            $('#sContainer').fadeOut(1000);
    }
    catch (e) { }
}

// ============================================================================================
// Common Javascript
// ============================================================================================
function pageSubmit(aForm) {
    allReadySubmitted = PageButtons.disableAll();
    if (allReadySubmitted)
        return false;
    var ok = true;
    res = "";
    //inline errors clear down errors...
    //if (ErrorStyleType==10)
     PageError.clearInLineErrors();
    setHiddenElements(); // questions on hidden line must be initialized
    //Validate page
    if (!ValidatePageQ() || !val_InputBoxes()) {
        setPageErrors(res);
        PageButtons.enableAll();
        return false;
    }
    else {
        //Call custom submit script
        submitPage = true;
        try {
            if (typeof customSubmitScript == 'function') {
                customSubmitScript(aForm);
                //check for custom errors
                if (appendCustomErrorItems()) {
                    submitPage = false;
                    setPageErrors(res);
                }
            }
        }
        catch (e) { if (advancedLogicDebug) alert('CustomSubmitScript failed : ' + e.message); }
        //Submit the page page
        Survey.submitPage(submitPage);
        return false;
    }
}

//Set page errors for display
function setPageErrors(errors) {
    positionToButtons();
    getElement('ValidationSummary2').className = 'showPanel'
    getElement('ValidationSummary2').setAttribute('style', 'display:');
    getElement('ValidationSummary2').innerHTML = errors;
    if (SurveyPmtErrors.toLowerCase() == 'true' || SurveyPmtErrors.toLowerCase() == ' true') {
        if (ErrorStyleType == 0)
            PageError.errorToast(SurveyPmtMsg); //alert(SurveyPmtMsg);
        else {
            if (inLineErrorCount > 0)
                PageError.errorToast(SurveyPmtMsgIn.replace("{0}", inLineErrorCount)); //alert(SurveyPmtMsgIn.replace("{0}", inLineErrorCount));
            else
                PageError.errorToast(SurveyPmtMsg);//alert(SurveyPmtMsg);
        }
    }
    //
    if (navigator.appName == 'Microsoft Internet Explorer') {
        if (event) 
            event.returnValue = false;
    }
}
// radio box question
function val_RadioBoxQ(radioId, questionText, LineNo, lblId) {

    qok = false;
    questionText = rmvPipeTextPlaceHolder(questionText);
    var objx = getElementByName(radioId);
    var objFocus;
    if (objx.length > 1)
        objFocus = objx[0];
    else
        objFocus = objx;

    if (!checkHidden(objFocus, LineNo)) // check if question is hidden hide show
    {
        var objx = getElementByName(radioId);
        for (ix = 0; ix < objx.length; ix++) {

            if (objx[ix].checked)
                qok = true;
        }
        if (!qok) {
            res = res + setError1(radioId, questionText);
            setQuestionTextColor(lblId, SurveyErrorDec);
        }
        else
            setQuestionTextColor(lblId, '');
    }
    else
        qok = true;
    return qok;
}
//Input matrix drop down
//Input matrix drop down
function val_InpMxDrop(checkB, LineNo, QSeq, ColSeq) {
    qok = true;
    rowId = checkB.replace('InpMx_', 'ARow')
    var objx = getElement(checkB);
    var objxFocus;
    if (objx.length > 1)
        objxFocus = objx[0];
    else
        objxFocus = objx
    //build list of hidden columns
    skipCol = "";
    //
    if (!checkHidden(objxFocus, LineNo)) // check if question is hidden
    {
        if (!checkHiddenAnsLine(rowId)) {
            //work around for single column input matrix question. Check if collection of drop downs or a single drop down
            if (objx[0].selectedIndex != undefined) 
            {
                for (ix = 0; ix < objx.length; ix++) {
                    colHidden = false;
                    if (skipCol.indexOf(ix + "|") == -1)
                        colHidden = checkHiddenCol("imColQ{0}Col{1}".replace('{0}', QSeq).replace('{1}', ix));
                    if (colHidden)
                        skipCol = ix + "|";
                    if (objx[ix].selectedIndex == 0 && !colHidden)
                        qok = false;
                }
            }
            else {
                colHidden = false;
                colHidden = checkHiddenCol("imColQ{0}Col{1}".replace('{0}', QSeq).replace('{1}', 0));
                if (objx.selectedIndex == 0 && !colHidden)
                    qok = false;
            }

        }
        else
            qok = true;
    }
    else
        qok = true;
    return qok;
}
//initially implemented for likert mx question
function checkHiddenCol1(colId) {
    notVisible = false;
    $("." + colId)
    if ($("." + colId).length > 0) {
        if ($("." + colId).attr("class").toLowerCase().indexOf("hidepanel") > 0 || $("." + colId).css('display') == 'none') {
                notVisible = true;
        }
        if ($("." + colId).css('display') == 'none')
            notVisible = true;
    }
    return notVisible;
}
//Check if object is hidden allocation question
function checkHiddenCol(ObjId) {
    notVisible = false;
    var aSrc = getElement(ObjId);
    if (aSrc.length)
        aSrc = aSrc[0];
    if (aSrc.className) {
        if (aSrc.className.toLowerCase() == 'hidepanel' || aSrc.style.display == 'none')
            notVisible = true;
    }
    if (aSrc.style.display.toLowerCase() == 'none')
        notVisible = true;
    alert(notVisible);
    return notVisible;
}
//Input matrix text
function val_InpMxTxt(checkB, LineNo) {
    qok = true;
    rowId = checkB.replace('InpMx_', 'ARow')
    var objx = getElement(checkB);
    var objxFocus;
    if (objx.length > 1)
        objxFocus = objx[0];
    else
        objxFocus = objx

    if (!checkHidden(objxFocus, LineNo)) // check if question is hidden
    {
        if (!checkHiddenAnsLine(rowId)) {
            for (ix = 0; ix < getElement(checkB).length; ix++) {
                if (getElement(checkB)[ix].value.length == 0)
                    qok = false;
            }
        }
        else
            qok = true;
    }
    else
        qok = true;
    return qok;
}
//Input matrix number
function val_InpMxNum(checkB, LineNo, min, max, ValFunction) {
    qok = true;
    rowId = checkB.replace('InpMx_', 'ARow')
    var objx = getElement(checkB);
    var objxFocus;
    if (objx.length > 1)
        objxFocus = objx[0];
    else
        objxFocus = objx
    //if (ValFunction!=null)
    //    alert(ValFunction());
    if (!checkHidden(objxFocus, LineNo)) // check if question is hidden
    {
        if (!checkHiddenAnsLine(rowId)) {
            if (getElement(checkB).length) {
                for (ix = 0; ix < getElement(checkB).length; ix++) {
                    var objx = getElement(checkB)[ix];
                    if (!val_InpMxNum1(objx, min, max))
                        qok = false;
                }
            }
            else {
                qok = val_InpMxNum1(getElement(checkB), min, max);
            }
        }
        else
            qok = true;
    }
    else
        qok = true;
    return qok;
}
function val_InpMxNum1(objx, min, max) {
    qok = true;
    if (objx.value.length == 0) //initialize to 0 is field is blank
        objx.value = '0';
    if (!isNaN(objx.value) && objx.value.length > 0) {
        intPart = parseFloat(objx.value);
        if (intPart < min || intPart > max)
            qok = false;
    }
    else
        qok = false;
    return qok;
}
function chkHSIMx(aSrc, mxType) {//hide show input matrix check input
    if (!aSrc.length) //a collection may be passed. if not try to get the collection using name
        aObjects = getElement(aSrc.name);
    else
        aObjects = aSrc; //assign collection
    //check for collection if not make collection of 1
    if (!aObjects.length) {
        aObjects = new Array(1);
        aObjects[0] = getElement(aSrc.name);
    }
    //
    for (x = 0; x < aObjects.length; x++) {
        aObj = aObjects[x];
        filled = false;
        switch (mxType.toLowerCase()) {
            case 'numeric':
                if (aObj.value.length > 0) {
                    numVal = convertNum(aObj);
                    if (numVal > 0)
                        return true;
                }
                break;
            case 'text':
                if (aObj.value.length > 0)
                    return true;
                break;
            case 'dropdown':
                if (aObj[aObj.selectedIndex].text.length > 0)
                    return true;
                break;
        }
    }
    return filled;
}
function getNumber(aObjId, col) {
    total = 0;
    aObj = getElement(aObjId)
    if (aObj.length) //if a collection
    {
        if (col == -1) // if col not specified then total row
        {
            for (ix = 0; ix < aObj.length; ix++)
                total = total + convertNum(aObj[ix])
        }
        else {
            if (col <= aObj.length)
                total = total + convertNum(aObj[col - 1])
        }
    }
    else {
        total = total + convertNum(aObj);
    }
    if (isNaN(total))
        total = 0;
    return total;
}
function convertNum(aObj) {
    intPart = 0;
    if (aObj.value == '')
        aObj.value = '0';
    if (!isNaN(aObj.value))
        intPart = parseFloat(aObj.value);
    else
        aObj.value = '0';
    return intPart;
}
//likert questions
function val_RadioBox(radioId, questionText, LineNo, lblId,QId) {
    qok = false;
    questionText = rmvPipeTextPlaceHolder(questionText);
    rowId = radioId.replace('RadioL_', 'ARow');
    var objx = getElementByName(radioId);
    var objFocus;
    if (objx.length > 1)
        objFocus = objx[0];
    else
        objFocus = objx;
    if (!checkHidden(objFocus, LineNo)) // check if question is hidden hide show
    {
        if (!checkHiddenAnsLine(rowId)) //make sure row is not hidden ans filtering
        {
            var objx = getElementByName(radioId);

            for (ix = 0; ix < objx.length; ix++) {
                if (objx[ix].checked)
                    qok = true;
            }
            if (!qok) {
                res = res + setErrorLikert(QId, questionText);
                setQuestionTextColor(lblId, SurveyErrorDec);
            }
            else
                setQuestionTextColor(lblId, '');
        }
        else
            qok = true;
    }
    else
        qok = true;
    return qok;
}
//likert slider
function val_RadioBoxSlider(inputId, questionText, LineNo, lblId,Qid) {
    qok = false;
    questionText = rmvPipeTextPlaceHolder(questionText);
    rowId = inputId.replace('SliderResultIX_', 'ARow');
    var objx = getElementByName(inputId);
    var objFocus;
    if (objx.length >= 1)
        objFocus = objx[0];
    else
        objFocus = objx;
    if (!checkHidden(objFocus, LineNo)) // check if question is hidden hide show
    {
        if (!checkHiddenAnsLine(rowId)) //make sure row is not hidden ans filtering
        {
            //if (getElement(inputId).value.length > 0)
            if (objFocus.value.length > 0)
                qok = true;
            else
                qok = false;
            if (!qok) {
                res = res + setErrorSlider(inputId, questionText,Qid);
                setQuestionTextColor(lblId, SurveyErrorDec);
            }
            else
                setQuestionTextColor(lblId, '');
        }
        else
            qok = true;
    }
    else
        qok = true;
    return qok;
}
//max difference
var m_maxDiffDupCheck = '';
function val_MaxDiff(radioId, questionText, LineNo, ansId, Qid) {
    dupError = false;
    qok = false;
    var answerid = '';
    questionText = rmvPipeTextPlaceHolder(questionText);
    rowId = 'ARow' + ansId;
    var objx = getElementByName(radioId);
    var objFocus;
    if (objx.length > 1)
        objFocus = objx[0];
    else
        objFocus = objx;
    if (!checkHidden(objFocus, LineNo)) // check if question is hidden hide show
    {
        var objx = getElementByName(radioId);
        for (ix = 0; ix < objx.length; ix++) {
            if (objx[ix].checked) {
                qok = true;
                if (objx[ix].value.indexOf(m_maxDiffDupCheck) > -1 && m_maxDiffDupCheck != '') {
                    qok = false;
                    dupError = true;
                }
                else
                    m_maxDiffDupCheck = objx[ix].value.substring(0, objx[ix].value.length - 2);
            }
        }
        if (!qok) {
            if (dupError)
                res = res + setErrorMxDiff1(radioId, questionText,Qid);
            else
                res = res + setErrorMxDiff(radioId, questionText,Qid);
            setQuestionTextColor(Qid, SurveyErrorDec);
        }
        else {
            setQuestionTextColor(Qid, '');
        }
    }
    else
        qok = true;
    return qok;
}
// Check box exclusive awnser return false if hidden
function val_CheckBE(checkB, LineNo, questionId) {
    qok = true;
    if (!checkHidden(getElement(checkB), LineNo)) {  // check if answerline is not hidden answer filtering
        qok = getElement(checkB).checked;
    }
    else
        qok = false;

    return qok;
}
// check box
function val_CheckB(checkB, LineNo, questionId) {
    qok = true;
    if (!checkHidden(getElement(checkB), LineNo)) {  // check if answerline is not hidden answer filtering
        qok = getElement(checkB).checked;
    }

    return qok;
}
//check if checkbox has selected more that max allowed
function val_CheckBMaxSelect(maxNo, LineNo, checkArrayList) {
    totSelected = 0;
    elemList = checkArrayList.split(',');
    for (ix = 0; ix < elemList.length; ix++) {
        if (!checkHidden(getElement(elemList[ix]), LineNo)) {
            if (getElement(elemList[ix]).checked)
                totSelected++
        }
    }
    if (totSelected > maxNo)
        return false;
    else
        return true;
}
// check box
function val_CheckB1(checkB, LineNo) {
    qok = false;
    rowId = checkB.replace('Checkl_', 'ARow')
    var objx = getElementByName(checkB);
    var objxFocus;
    if (objx.length > 1)
        objxFocus = objx[0];
    else
        objxFocus = objx

    if (!checkHidden(objxFocus, LineNo)) // check if question is hidden
    {
        if (!checkHiddenAnsLine(rowId)) {
            for (ix = 0; ix < getElementByName(checkB).length; ix++) {

                if (getElementByName(checkB)[ix].checked)
                    qok = true;
            }
        }
        else
            qok = true;
    }
    else
        qok = true;
    return qok;
}
// input box
function val_InputBox(inputBoxId, questionText, LineNo) {
    qok = true;
    questionText = rmvPipeTextPlaceHolder(questionText);
    var objx = getElement(inputBoxId);

    if (!checkHidden2(objx, LineNo)) // check if question is hidden
    {
        if (objx.value.length == 0) {
            qok = false;
            res = res + setError1(inputBoxId, questionText);
        }
    }
    return qok;
}
// input box
function val_FreeText(inputBoxId, questionText, LineNo, lblquestionId) {
    qok = true;
    questionText = rmvPipeTextPlaceHolder(questionText);
    var objx = getElement(inputBoxId);

    if (!checkHidden(objx, LineNo)) // check if question is hidden
    {
        if (objx.value.length == 0) {
            qok = false;
            res = res + setError1(inputBoxId, questionText);
        }
    }
    if (!qok)
        setQuestionTextColor(lblquestionId, SurveyErrorDec);
    else
        setQuestionTextColor(lblquestionId, '');
    return qok;
}
function val_HeatMap(inputBoxId, questionText, LineNo, lblquestionId) {
    qok = true;
    if (Modernizr.canvas) {
        questionText = rmvPipeTextPlaceHolder(questionText);
        var objx = getElement(inputBoxId);

        if (!checkHidden(objx, LineNo)) // check if question is hidden
        {
            if (objx.value.length == 0) {
                qok = false;
                res = res + setError1(inputBoxId, questionText);
            }
        }
        if (!qok)
            setQuestionTextColor(lblquestionId, SurveyErrorDec);
        else
            setQuestionTextColor(lblquestionId, '');
    }
   
    return qok;
}
// input box
function val_FileUpload(inputBoxId, questionText, LineNo, lblquestionId) {
    qok = true;
    questionText = rmvPipeTextPlaceHolder(questionText);
    var objx = getElement(inputBoxId);

    if (!checkHidden(objx, LineNo)) // check if question is hidden
    {
        if (objx.value.length == 0) {
            qok = false;
            res = res + setErrorFileUpload(inputBoxId, questionText);
        }
    }
    if (!qok)
        setQuestionTextColor(lblquestionId, SurveyErrorDec);
    else
        setQuestionTextColor(lblquestionId, '');
    return qok;
}
// input box
function val_ShortFreeText(inputBoxId, questionText, LineNo, lblquestionId) {
    sqok = true;
    questionText = rmvPipeTextPlaceHolder(questionText);
    var objx = getElement(inputBoxId);

    if (!checkHidden(objx, LineNo)) // check if question is hidden
    {
        if (objx.value.length == 0) {
            sqok = false;
            res = res + setError1(inputBoxId, questionText);
        }
    }
    if (!sqok)
        setQuestionTextColor(lblquestionId, SurveyErrorDec);
    else
        setQuestionTextColor(lblquestionId, '');
    return sqok;
}
// numeric text
function val_NumericText(inputBoxId, questionText, LineNo, lblquestionId, maxValue, minValue, basedOnQuest) {
    //parseInt returns 0 when 09 is entered. use parse float instead
    var objy;
    ErrorMax = minValue + ' - ' + maxValue;
    questionText = rmvPipeTextPlaceHolder(questionText);
    sqok = true;
    intPart = 0;
    if (!checkHidden(objx, LineNo)) // check if question is hidden
    {
        var objx = getElement(inputBoxId);
        if (!isNaN(objx.value) && objx.value.length > 0)
            intPart = parseFloat(objx.value);
        else
            sqok = false;
        if (basedOnQuest.length > 0) //validation based on question
        {
            objy = getElement(basedOnQuest);
            ErrorMax = minValue + ' - ' + objy.value;
        }
        if (sqok) {
            if (basedOnQuest.length > 0) //validation based on question
            {
                intBasedOn = 0;
                if (!isNaN(objy.value) && objy.value.length > 0) {
                    intBasedOn = parseFloat(objy.value);
                    if (intPart > intBasedOn)
                        sqok = false;
                }
                else
                    sqok = false;
                //ErrorMax=intBasedOn;
                ErrorMax = "0" + " - " + intBasedOn;
            }
            else {
                ErrorMax = minValue + ' - ' + maxValue;
                if (maxValue != 0)  //validation based on numeric value only
                {
                    if (intPart > maxValue)
                        sqok = false;
                }
                if (minValue != 0)  //validation based on numeric value only
                {
                    if (intPart < minValue)
                        sqok = false;
                }
            }

        }
        if (!sqok) {
            if (ErrorMax == 0)
                res = res + setError1(inputBoxId, questionText);
            else
                res = res + setErrorNumericTextError(inputBoxId, questionText, ErrorMax);
            setQuestionTextColor(lblquestionId, SurveyErrorDec);
        }
        else
            setQuestionTextColor(lblquestionId, '');
    }
    return sqok;
}
function rmvPipeTextPlaceHolder(questionText) {
    var Regx = /{.*}/;
    questionText = questionText.replace(Regx, '');
    return questionText;
}
// input box
function val_DropDown(dId, questionText, LineNo, questionId) {
    qok = true;
    questionText = rmvPipeTextPlaceHolder(questionText);
    if (!checkHidden(getElement(dId), LineNo)) // check if question is hidden
    {
        var objx = getElement(dId);
        //Selected index of 0 not selected
        if (objx.selectedIndex == 0 || objx[objx.selectedIndex].value == '') {
            qok = false;
            res = res + setError1(dId, questionText);
        }
        if (!qok)
            setQuestionTextColor(questionId, SurveyErrorDec);
        else
            setQuestionTextColor(questionId, '');
    }

    return qok;
}
// validate allocation question
function totNum(dId, lineNo) {

    var val = 0;
    try {
        val1 = formatIntA(getElement(dId));
        val = parseInt(val1);
    }
    catch (e) {
        val = 0;
    }
    //initialize to 0 
    if (isNaN(val))
        val = 0;
    return val;
}
function formatInt1(aVal1) {
    res = aVal1;
    return res;
}
//returns a collection for elements like radio needed for xhtml
function getElementByName(name) {
    var elem;
    if (document.getElementsByName) {
        elem = document.getElementsByName(name);
    }
    //        
    if (elem == null)
        elem = document.forms[0].elements[name];
    return elem;
}
// Get element by name
function getElementUsingName(elementx) {
    var elem;
    if (navigator.appName == 'Microsoft Internet Explorer')
        elem = document.all(elementx);
    else
        elem = document.getElementByName(elementx);
    return elem;
}
// Get form elements
function getFormElements() {
    if (navigator.appName == 'Microsoft Internet Explorer')
        return document.all;
    else
        return document.forms[0]

}
//
function setQuestionTextColor(questionid, tcolor) {
    sp = questionid.indexOf('_');
    ln = questionid.length;
    ex = ln - sp;
    if (sp != -1)
        lblValue = 'lbl' + questionid.substring(sp, ex + 6);
    else
        lblValue = 'lbl_' + questionid;
    //likert questions and radio questions have - in different places
    try {
          getElement(lblValue).style.borderLeft = tcolor;
    }
    catch (e) {
        lblValue = lblValue.replace('-', '_').replace('-', '_').replace('-', '_').replace('-', '_');
        getElement(lblValue).style.borderLeft = tcolor;
    }

}
/// set allocation error
function setErrorAlloc(questionid, questionText, remValue, controlTotal) {
    aRes = '';
    if (ErrorStyleType == 0) 
        aRes = aRes + "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"getElement('lbl_" + questionid + "').focus();return false;\">"
				 + questionText + setDot(questionText) + '</a></u> &nbsp; ' + SurveyAllocError.replace('%1', remValue).replace('%2', controlTotal) + '</font></span></br>';
    else
        PageError.addQuestionErrorInLine(questionid, SurveyAllocErrorIn.replace('%1', remValue).replace('%2', controlTotal));
    return aRes;
}
function setErrorRank(questionid, questionText, missingValues) {
    aRes = '';
    if (ErrorStyleType == 0)
        aRes = aRes + "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"getElement('lbl_" + questionid + "').focus();return false;\">"
				 + questionText + setDot(questionText) + '</a></u> &nbsp; ' + SurveyRankQRequired.replace('{0}', missingValues) + '</font></span></br>';
    else {
        if (questionid.indexOf("_") > -1)
            PageError.addQuestionErrorInLine(questionid.split("_")[1], SurveyRankQRequired.replace('{0}', missingValues));
        else
            PageError.addQuestionErrorInLine(questionid, SurveyRankQRequired.replace('{0}', missingValues));
    }
    return aRes;
}
function setErrorRankSort(questionid, questionText, missingValues) {
    aRes = '';
    if (ErrorStyleType == 0)
        aRes = aRes + "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"getElement('lbl_" + questionid + "').focus();return false;\">"
				 + questionText + setDot(questionText) + '</a></u> &nbsp; ' + SurveyunRankedSort + '</font></span></br>';
    else {
        if (questionid.indexOf("_")>-1)
            PageError.addQuestionErrorInLine(questionid.split("_")[1], SurveyunRankedSort);
        else
            PageError.addQuestionErrorInLine(questionid, SurveyunRankedSort);
    }
    return aRes;
}
function setErrorRankDup(questionid, questionText) {
    aRes = '';
    if (ErrorStyleType == 0)
        aRes = aRes + "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"getElement('lbl_" + questionid + "').focus();return false;\">"
				 + questionText + setDot(questionText) + '</a></u> &nbsp; ' + SurveyRankQRequiredDup + '</font></span></br>';
    else {
        if (questionid.indexOf("_") > -1)
            PageError.addQuestionErrorInLine(questionid.split("_")[1], SurveyRankQRequiredDup);
        else
            PageError.addQuestionErrorInLine(questionid, SurveyRankQRequiredDup);
    }
    return aRes;
}
function setErrorExtraRank(questionid, questionText, aType, ctlValue) {
    aRes = '';
    if (ErrorStyleType == 0) 
        aRes = aRes + "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"getElement('lbl_" + questionid + "').focus();return false;\">"
				 + questionText + setDot(questionText) + '</a></u> &nbsp; ' + SurveyRankQExtra + ' ' + ctlValue + '</font></span></br>';
    else
    {
        if (questionid.indexOf("_") > -1)
            PageError.addQuestionErrorInLine(questionid.split("_")[1], SurveyRankQExtra + ' ' + ctlValue);
        else
            PageError.addQuestionErrorInLine(questionid, SurveyRankQExtra + ' ' + ctlValue);
    }
    return aRes;
}
//Set error
function setErrorFileUpload(questionid, questionText) {
    aRes = '';
    if (ErrorStyleType == 0) 
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			+ questionText + setDot(questionText) + '</a></u> &nbsp;' + SurveyFileUploadRequired + '</font></span></br>';
	else
	    PageError.addQuestionErrorInLine(questionid.split("_")[1], SurveyFileUploadRequired);
	
    return aRes;
}
//Set error
function setError1(questionid, questionText) {
    aRes = '';
    if (ErrorStyleType == 0)
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			+ questionText + setDot(questionText) + '</a></u> &nbsp;' + SurveyQRequired + '</font></span></br>';
    else {
        if (questionid.indexOf("_")>-1)
            PageError.addQuestionErrorInLine(questionid.split("_")[1], SurveyQRequired);
        else
            PageError.addQuestionErrorInLine(questionid, SurveyQRequired); //SurveyARequired
    }
    return aRes;
}
function setErrorMinSelection(questionid, questionText, MinSelection) {
    aRes = '';
    if (ErrorStyleType == 0)
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			+ questionText + setDot(questionText) + '</a></u> &nbsp;' + SurveyQRequiredMinSelection.replace('{0}', MinSelection) + '</font></span></br>';
    else {
        if (questionid.indexOf("_") > -1)
            PageError.addQuestionErrorInLine(questionid.split("_")[1], SurveyQRequiredMinSelection.replace('{0}', MinSelection));
        else
            PageError.addQuestionErrorInLine(questionid, SurveyQRequiredMinSelection.replace('{0}', MinSelection)); //SurveyARequired
    }
    return aRes;
}
function setErrorSlider(questionid, questionText,QID) {
    aRes = '';
    if (ErrorStyleType == 0)
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			+ questionText + setDot(questionText) + '</a></u> &nbsp;' + SurveyQRequired + '</font></span></br>';
    else {
        PageError.addQuestionErrorInLine(QID, SurveyQRequired); //SurveyARequired
    }
    return aRes;
}
//Set error
function setErrorLikert(questionid, questionText) {
    aRes = '';
    if (ErrorStyleType == 0)
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			+ questionText + setDot(questionText) + '</a></u> &nbsp;' + SurveyQRequired + '</font></span></br>';
    else
        PageError.addQuestionErrorInLine(questionid, SurveyQRequired); //SurveyARequired
    return aRes;
}
//Set error
function setErrorMxDiff(questionid, questionText,QID) {
    aRes = '';
    if (ErrorStyleType == 0) 
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			   + questionText + setDot(questionText) + '</a></u> &nbsp;' + SurveyMaxDiff + '</font></span></br>';
    else
        PageError.addQuestionErrorInLine(QID, SurveyMaxDiff);
    return aRes;
    
}
//Set error
function setErrorMxDiff1(questionid, questionText,QID) {
    aRes = '';
    if (ErrorStyleType == 0) 
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			+ questionText + setDot(questionText) + '</a></u> &nbsp;' + SurveyMaxDiffCol + '</font></span></br>';
    else
        PageError.addQuestionErrorInLine(QID, SurveyMaxDiffCol);	
    return aRes;
}

//Set error
function setErrorExclusive(questionid, questionText) {
    aRes = '';
    if (ErrorStyleType == 0)
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			+ questionText + setDot(questionText) + '</a></u> &nbsp;' + SurveyAnsExclusive + '</font></span></br>';
    else {
        if (questionid.indexOf("_") > -1)
            questionid = questionid.split("_")[1];
        splitAns = questionText.split("[");
        if (splitAns.length >= 2) {
            splitAns = splitAns[1].split("]");
            if (splitAns.length >= 1)
                questionText = splitAns[0].replace("^","");
        }
        PageError.addQuestionErrorInLine(questionid, questionText + setDot(questionText) + SurveyAnsExclusive);
    }
    return aRes;
}
//Set error
function setErrorMaxAnswer(maxAnswer, questionid, questionText) {
    aRes = '';
    if (ErrorStyleType == 0)
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			+ questionText + setDot(questionText) + '</a></u> &nbsp;' + maxAnswer + ' ' + SurveyErrorCMS + '</font></span></br>';
    else {
        if (questionid.split("_").length>1)
          PageError.addQuestionErrorInLine(questionid.split("_")[1], maxAnswer + ' ' + SurveyErrorCMS);
        else
          PageError.addQuestionErrorInLine(questionid, maxAnswer + ' ' + SurveyErrorCMS);
    }
    return aRes;
}
function setErrorCustom(questionid, questionText) {
    aRes = '';
    if (ErrorStyleType == 0)
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			+ questionText + setDot(questionText) + '</a></u> &nbsp;' + '</font></span></br>';
    else
        PageError.addQuestionErrorInLine(questionid.split("_")[1], questionText);	
    return aRes;
}
//Set error
function setErrorNumericTextError(questionid, questionText, MaxValue) {
    aRes = '';
    if (ErrorStyleType == 0)
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			+ questionText + setDot(questionText) + '</a></u> &nbsp;' + SurveyQNumericTextRequired + ' ' + MaxValue + '</font></span></br>';
    else
        PageError.addQuestionErrorInLine(questionid.split("_")[1], SurveyQNumericTextRequiredIn + ' ' + MaxValue);		
    return aRes;
}
function setErrorInputMxError(questionid, questionText, QuestionTotal) {
    aRes = '';
    if (ErrorStyleType == 0)
            aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			+ questionText + setDot(questionText) + '</a></u> &nbsp;' + SurveyQTotal + ' ' + QuestionTotal + '</font></span></br>';
    else
        PageError.addQuestionErrorInLine(questionid.split("_")[1], SurveyQTotal + ' ' + QuestionTotal);	
    return aRes;
}
function setErrorInputMxError1(ansid, ansText, min, max) {
    aRes = '';
    if (ErrorStyleType == 0)
        aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			+ ansText + '</a></u> &nbsp;' + SurveyQtotalMinMax + ' ' + min + " - " + max + '</font></span></br>';
    else
        PageError.addQuestionErrorInLine(ansid.split("_")[0], SurveyQtotalMinMax + ' ' + min + " - " + max);		
    return aRes;
}
//Set error input
function setError2(questionid, questionText) {
    aRes = '';
    aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			+ questionText + setDot(questionText) + '</a></u> &nbsp;' + SurveyRequired + '</font></span></br>';
    return aRes;
}
//
//Validate input boxes
//
//check input filled
function checkInpFilled(aQuestion, aObj) {
    // do not delete required.
}
//Validate input boxes
function val_InputBoxes() {
    //get input boxes
    var elm = document.getElementsByTagName('input');
    iOkInput = valEmelemts(elm);
    //get select boxes
    elm = document.getElementsByTagName('select');
    iOkSelect = valEmelemts(elm);
    if (!iOkSelect || !iOkInput)
        iOk = false;
    else
        iOk = true;
    //check for custom error validation
    for (var ix = 0; ix < cErrorsFunctions.length; ix++) {
        if (cErrorsFunctions[ix].length > 0) {
            var functionDemo = new Function(cErrorsFunctions[ix])
            functionDemo();
            if (!cErrorsFunctionsEval[ix])
                iOk = false;
        }
    }
    //if briteverify error should be flagged by status code //
    if ($(".bvErrorHardStop").length > 0) {
        iOk = false;
        //for (i = 0; i < $(".bvError").length ; i++) {
        //    eEle = $(".bvError")[i].id.replace("_status", "");
        //    setError($("#" + eEle)[0]);
        //}
    }
    //check for custom errors
    if (appendCustomErrorItems())
        iOk = false;
    return iOk;
}
function valEmelemts(elements) {
    eOk = true;
    for (var ix = 0; ix < elements.length; ix++) {
        aSrc = elements[ix];
        if ((aSrc.tagName == "INPUT" || aSrc.tagName == "SELECT") & !checkHidden2(aSrc)) {
            var chg = '';
            if (!aSrc.onchange)
                chg = '';
            else
                chg = aSrc.onchange.toString();
            //if (chg.toLowerCase().indexOf('checkinpfilled')!=-1)
            //{
            switch (aSrc.type) {
                case "select-one":
                    if (chg.toLowerCase().indexOf('checkinpfilled') != -1) {
                        fok = true;
                        fdok = true;
                        if (aSrc.selectedIndex > -1) {
                            if (Trim(aSrc[aSrc.selectedIndex].value).length == 0) {
                                eOk = false;
                                res = res + setError(aSrc);
                            }
                        }
                        else {
                            eOk = false;
                            res = res + setError(aSrc);
                        }
                    }
                    break;
                case "text":
                    if (chg.toLowerCase().indexOf('checkinpfilled') != -1 || aSrc.value.length > 0) {
                        aSrc.value = Trim(aSrc.value);
                        fok = true;
                        fdok = true;
                        if (aSrc.value.length == 0)
                            fok = false;
                        else {
                            //check emailaddress
                            if (aSrc.name.toLowerCase().indexOf('email') != -1) {
                                if (!SurveyForm.isEmail(aSrc.value))
                                    fok = false;
                                else {
                                    //check for compare field
                                    cmpFieldName = aSrc.name.replace('ext_', 'cnf_');
                                    if (getElement(cmpFieldName) != null) {
                                        if (Trim(getElement(cmpFieldName).value).toLowerCase() != Trim(aSrc.value).toLowerCase()) {
                                            fok = false;
                                            res = res + setErrorCnf(aSrc);
                                            aSrc = getElement(cmpFieldName);
                                        }
                                    }
                                }
                            }
                            //check zip
                            if (aSrc.name.toLowerCase().indexOf('zipcode') != -1) {
                                if (!isZip(aSrc.value))
                                    fok = false;
                            }
                            //check phone
                            if (aSrc.name.toLowerCase().indexOf('_phone') != -1) {
                                if (!isPhone(aSrc.value))
                                    fok = false;
                            }
                            //check number
                            if (aSrc.name.toLowerCase().indexOf('_num') != -1) {
                                if (!SurveyForm.isNumber(aSrc.value))
                                    fok = false;
                            }
                            if (aSrc.name.toLowerCase().indexOf('ymd_') != -1) {
                                if (!SurveyForm.isYMD(aSrc.value))
                                    fok = false;
                            }
                            if (aSrc.name.toLowerCase().indexOf('mdy_') != -1) {
                                if (!SurveyForm.isMDY(aSrc.value))
                                    fok = false;
                            }
                            if (aSrc.name.toLowerCase().indexOf('dmy_') != -1) {
                                if (!SurveyForm.isDMY(aSrc.value))
                                    fok = false;
                            }
                        }
                        if (!fok) {
                            res = res + setError(aSrc);
                            eOk = false;
                        }
                    }
                    break;
                case "checkbox":
                case "radio":
                    if (chg.toLowerCase().indexOf('checkinpfilled') != -1) {
                        fok = true;
                        fdok = true;
                        radOk = false;
                        aSrc = getElementByName(aSrc.name);
                        if (aSrc.length) {
                            for (ixy = 0; ixy < aSrc.length; ixy++) {
                                if (aSrc[ixy].checked)
                                    radOk = true;
                            }
                        }
                        else {
                            getElement(aSrc.name);
                            if (aSrc.checked)
                                radOk = true;
                        }
                        if (!radOk) {
                            eOk = false;
                            res = res + setError(aSrc);
                        }
                    }
                    break;
                default:
                    break;
            }
            //}
        }
        if (inLineErrorCount == 1) //scroll to first error
            scrollToFormError(aSrc.name)
    }
    return eOk;
}
function appendCustomErrorItems() {
    errorsFound = false;
    if (inLineErrorCount > 0) //will have a value for in line errors
        errorsFound = true;
    for (ix = 0; ix < cErrors.length; ix++) {
        if (cErrors[ix].length > 0) {
            if (cErrorsType[ix].length == 0) //input box else question
                res = res + setErrorMsg(getElement(cErrorsObj[ix]), cErrors[ix]);
            else {
                res = res + setError1AL(getElement(cErrorsObj[ix]), cErrors[ix]);
                setQuestionTextColor(cErrorsObj[ix], SurveyErrorDec);
            }
            cErrors[ix] = '';
            cErrorsObj[ix] = '';
            errorsFound = true;
        }
    }
    cErrorsCount = 0;
    return errorsFound
}
// Is email address
function iseMail(email) {
    valid = false;
    var Regx = /^[\w\.\-\']+\@[\w\.\-\']+\.[\w.]{2,}$/;
    var RegxE = /[\.@|@\.]/;  //check for .@ and @.
    if (Regx.test(email)
        && email.indexOf('.@') == -1
        && email.indexOf('@.') == -1
        && email.substr(email.length - 1) != ".")
        valid = true;
    return valid;
}
// Custom regular expression validation
function isCustomValidation(aObj, regExpression, msg) {
    var Regx = new RegExp(regExpression);
    if (!Regx.test(aObj.value)) {
        aObj.value = '';
        if (aObj.id.length > 0)
            foundm = checkItem(aObj.id);
        else
            foundm = checkItem(aObj.name);
        if (!foundm) {
            cErrorsCount = cErrorsCount + 1;
            cErrors[cErrorsCount] = msg;
            if (aObj.id.length > 0)
                cErrorsObj[cErrorsCount] = aObj.id;
            else
                cErrorsObj[cErrorsCount] = aObj.name;
        }
    }
    else {
        if (aObj.id.length > 0)
            removeErrorItem(aObj.id);
        else
            removeErrorItem(aObj.name);
    }
}
function isEmailAddress(aObj, msg) {
    failed = false;
    if (iseMail(aObj.value))
        failed = true;
    if (!failed) {
        aObj.value = '';
        if (cErrorsCount < cErrors.length) {
            if (aObj.id.length > 0)
                foundm = checkItem(aObj.id);
            else
                foundm = checkItem(aObj.name);
            if (!foundm) {
                cErrorsCount = cErrorsCount + 1;
                cErrors[cErrorsCount] = msg;
                if (aObj.id.length > 0)
                    cErrorsObj[cErrorsCount] = aObj.id;
                else
                    cErrorsObj[cErrorsCount] = aObj.name;
            }
        }
    }
    else {
        if (aObj.id.length > 0)
            removeErrorItem(aObj.id);
        else
            removeErrorItem(aObj.name);
    }
}
function isCustomNum(aObj, min, max, msg) {
    failed = false;
    var Regx = /\D/;
    if (!Regx.test(aObj.value)) {
        integ = parseInt(aObj.value)
        if (integ < min || integ > max) {
            failed = true;
            aObj.value = '';
        }
    }
    else {
        failed = true;
        aObj.value = '';
    }
    if (failed) {
        if (cErrorsCount < cErrors.length) {
            if (aObj.id.length > 0)
                foundm = checkItem(aObj.id);
            else
                foundm = checkItem(aObj.name);
            if (!foundm) {
                cErrorsCount = cErrorsCount + 1;
                cErrors[cErrorsCount] = msg;
                if (aObj.id.length > 0)
                    cErrorsObj[cErrorsCount] = aObj.id;
                else
                    cErrorsObj[cErrorsCount] = aObj.name;
            }
        }

    }
    else {
        if (aObj.id.length > 0)
            removeErrorItem(aObj.id);
        else
            removeErrorItem(aObj.name);
    }

}

function isCustomCompare(aObjName, aObjName1, msg) {
    aObj = getElement(aObjName);
    aObj1 = getElement(aObjName1);
    failed = false;
    if (aObj.value.toLowerCase() != aObj1.value.toLowerCase())
        failed = true;
    if (failed) {
        aObj1.value = '';
        if (cErrorsCount < cErrors.length) {
            if (aObj.id.length > 0)
                foundm = checkItem(aObj.id);
            else
                foundm = checkItem(aObj.name);
            if (!foundm) {
                cErrorsCount = cErrorsCount + 1;
                cErrors[cErrorsCount] = msg;
                if (aObj.id.length > 0)
                    cErrorsObj[cErrorsCount] = aObj.id;
                else
                    cErrorsObj[cErrorsCount] = aObj.name;
            }
        }
    }
    else {
        if (aObj.id.length > 0)
            removeErrorItem(aObj.id);
        else
            removeErrorItem(aObj.name);
    }
}
function checkItem(aid) {
    foundm = false;
    //remove error item from list
    for (ix = 0; ix < cErrors.length; ix++) {
        if (cErrorsObj[ix].length > 0) {
            if (cErrorsObj[ix] == aid)
                foundm = true;
        }
    }
    return foundm;
}
function removeErrorItem(id) {
    //remove error item from list
    for (ix = 0; ix < cErrors.length; ix++) {
        if (cErrorsObj[ix].length > 0) {
            if (cErrorsObj[ix] == id) {
                cErrors[ix] = '';
                cErrorsObj[ix] = '';
            }
        }
    }
}
function isZip(zip) {
    // Combined UK and US validator
    var Regx = /^\d{5}(\-\d{4})?$|^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$/;
    var RegxCanada = /^[a-zA-Z]{1}\d{1}[A-Z]{1} *\d{1}[A-Z]{1}\d{1}$/;
    var RegxEirCode = /^[AC-FHKNPRTV-Y]{1}[0-9]{1}[0-9W]{1}[ \-]?[0-9AC-FHKNPRTV-Y]{4}$/;
    if (!Regx.test(zip) && !RegxCanada.test(zip) && !RegxEirCode.test(zip))
        return (false);
    else
        return (true);
}
function isPhone(phone) {
    // us Phone var Regx = /^\(?\d{3}\)?.?\d{3}.?\d{4}$/;
    var Regx = /.*/;
    return (Regx.test(phone));
}
//--Piped text  function
function getPipeValue(searchValue) {
    for (ixm = 0; ixm < pipeText.length; ixm++) {
        if (pipeText[ixm].toLowerCase().indexOf(searchValue.toLowerCase()) != -1) {
            pair = pipeText[ixm].split(':')
            if (pair.length > 1)
                return pair[1];
        }
    }
    return '';
}
function getPipedExpression(aObj) {
    replaceV = '';
    if (aObj.innerText) {
        var Regx = /{.*}/;
        if (Regx.test(aObj.innerText)) {
            sp = aObj.innerText.indexOf('{');
            ep = aObj.innerText.indexOf('}');
            replaceV = aObj.innerText.substring(sp, ep + 1);
        }
    }
    return replaceV;
}
function setPipedTextOnPageLoad() {

    loadPipedText();
    for (ixp1 = 0; ixp1 < pipeText.length; ixp1++) {
        if (pipeText[ixp1].length > 0) {
            setPipedText(pipeText[ixp1].split(':')[0])
        }
    }
}
function setPipedText(PlaceHolder) {
    loadPipedText();
    for (ixy = 0; ixy < pipedQuestionText.length; ixy++) {
        if (pipedQuestionText[ixy].toLowerCase().indexOf(PlaceHolder.toLowerCase()) != -1) {
            if (getElement(pipedQuestionCtl[ixy]))
                pipeElement = getElement(pipedQuestionCtl[ixy]);
            else
                pipeElement = getElement(pipedQuestionCtl[ixy].replace(/-/g, '_')); //answers have _ not - in id
            if (pipeElement.innerHTML) // ensure object has
            {
                repVal = PlaceHolder;
                newVal = unescape(getPipeValue(repVal));
                if (newVal.length > 0) {
                    //if text contains a bar it means first value is the pipe text and the second display value
                    splValues = newVal.split('^');
                    displayVal = newVal;
                    if (splValues.length == 2) {
                        newVal = splValues[0];
                        displayVal = splValues[1];
                    }
                    pipeElement.innerHTML = HtmlDecode(pipedQuestionText[ixy].replace(repVal, displayVal));
                    if (getElement(pipedQuestionCtl[ixy].replace('lbl_', 'pv_')))
                        getElement(pipedQuestionCtl[ixy].replace('lbl_', 'pv_')).value = newVal; //set piped text value
                }
            }
        }
    }
}
function loadPipedText() {
    pipeText = getElement("__Pipe").value.split('|');
}
function setPlaceHolder(placeHolder, pipedText) {
    updated = false;
    loadPipedText();
    getElement("__Pipe").value = '';
    for (ixp = 0; ixp < pipeText.length; ixp++) {
        if (pipeText[ixp].length > 0) {
            if (pipeText[ixp].toLowerCase().indexOf(placeHolder.toLowerCase()) != -1) // ensure object has 
            {
                pipeText[ixp] = placeHolder + ':' + escape(pipedText);
                updated = true;
            }
            getElement("__Pipe").value = getElement("__Pipe").value + pipeText[ixp] + '|';
        }
    }
    if (!updated)
        getElement("__Pipe").value = getElement("__Pipe").value + placeHolder + ':' + escape(pipedText);
    loadPipedText();
}
function HtmlDecode(s) {
    var out = "";
    if (s == null) return;

    var l = s.length;
    for (var i = 0; i < l; i++) {
        var ch = s.charAt(i);

        if (ch == '&') {
            var semicolonIndex = s.indexOf(';', i + 1);
            notVlaid = false;
            if (semicolonIndex > 0) {
                var entity = s.substring(i + 1, semicolonIndex);
                if (entity.length > 1 && entity.charAt(0) == '#') {
                    if (entity.charAt(1) == 'x' || entity.charAt(1) == 'X')
                        ch = String.fromCharCode(eval('0' + entity.substring(1)));
                    else
                        ch = String.fromCharCode(eval(entity.substring(1)));
                }
                else {
                    switch (entity) {
                        case 'quot': ch = String.fromCharCode(0x0022); break;
                        case 'amp': ch = String.fromCharCode(0x0026); break;
                        case 'lt': ch = String.fromCharCode(0x003c); break;
                        case 'gt': ch = String.fromCharCode(0x003e); break;
                        case 'nbsp': ch = String.fromCharCode(0x00a0); break;
                        case 'iexcl': ch = String.fromCharCode(0x00a1); break;
                        case 'cent': ch = String.fromCharCode(0x00a2); break;
                        case 'pound': ch = String.fromCharCode(0x00a3); break;
                        case 'curren': ch = String.fromCharCode(0x00a4); break;
                        case 'yen': ch = String.fromCharCode(0x00a5); break;
                        case 'brvbar': ch = String.fromCharCode(0x00a6); break;
                        case 'sect': ch = String.fromCharCode(0x00a7); break;
                        case 'uml': ch = String.fromCharCode(0x00a8); break;
                        case 'copy': ch = String.fromCharCode(0x00a9); break;
                        case 'ordf': ch = String.fromCharCode(0x00aa); break;
                        case 'laquo': ch = String.fromCharCode(0x00ab); break;
                        case 'not': ch = String.fromCharCode(0x00ac); break;
                        case 'shy': ch = String.fromCharCode(0x00ad); break;
                        case 'reg': ch = String.fromCharCode(0x00ae); break;
                        case 'macr': ch = String.fromCharCode(0x00af); break;
                        case 'deg': ch = String.fromCharCode(0x00b0); break;
                        case 'plusmn': ch = String.fromCharCode(0x00b1); break;
                        case 'sup2': ch = String.fromCharCode(0x00b2); break;
                        case 'sup3': ch = String.fromCharCode(0x00b3); break;
                        case 'acute': ch = String.fromCharCode(0x00b4); break;
                        case 'micro': ch = String.fromCharCode(0x00b5); break;
                        case 'para': ch = String.fromCharCode(0x00b6); break;
                        case 'middot': ch = String.fromCharCode(0x00b7); break;
                        case 'cedil': ch = String.fromCharCode(0x00b8); break;
                        case 'sup1': ch = String.fromCharCode(0x00b9); break;
                        case 'ordm': ch = String.fromCharCode(0x00ba); break;
                        case 'raquo': ch = String.fromCharCode(0x00bb); break;
                        case 'frac14': ch = String.fromCharCode(0x00bc); break;
                        case 'frac12': ch = String.fromCharCode(0x00bd); break;
                        case 'frac34': ch = String.fromCharCode(0x00be); break;
                        case 'iquest': ch = String.fromCharCode(0x00bf); break;
                        case 'Agrave': ch = String.fromCharCode(0x00c0); break;
                        case 'Aacute': ch = String.fromCharCode(0x00c1); break;
                        case 'Acirc': ch = String.fromCharCode(0x00c2); break;
                        case 'Atilde': ch = String.fromCharCode(0x00c3); break;
                        case 'Auml': ch = String.fromCharCode(0x00c4); break;
                        case 'Aring': ch = String.fromCharCode(0x00c5); break;
                        case 'AElig': ch = String.fromCharCode(0x00c6); break;
                        case 'Ccedil': ch = String.fromCharCode(0x00c7); break;
                        case 'Egrave': ch = String.fromCharCode(0x00c8); break;
                        case 'Eacute': ch = String.fromCharCode(0x00c9); break;
                        case 'Ecirc': ch = String.fromCharCode(0x00ca); break;
                        case 'Euml': ch = String.fromCharCode(0x00cb); break;
                        case 'Igrave': ch = String.fromCharCode(0x00cc); break;
                        case 'Iacute': ch = String.fromCharCode(0x00cd); break;
                        case 'Icirc': ch = String.fromCharCode(0x00ce); break;
                        case 'Iuml': ch = String.fromCharCode(0x00cf); break;
                        case 'ETH': ch = String.fromCharCode(0x00d0); break;
                        case 'Ntilde': ch = String.fromCharCode(0x00d1); break;
                        case 'Ograve': ch = String.fromCharCode(0x00d2); break;
                        case 'Oacute': ch = String.fromCharCode(0x00d3); break;
                        case 'Ocirc': ch = String.fromCharCode(0x00d4); break;
                        case 'Otilde': ch = String.fromCharCode(0x00d5); break;
                        case 'Ouml': ch = String.fromCharCode(0x00d6); break;
                        case 'times': ch = String.fromCharCode(0x00d7); break;
                        case 'Oslash': ch = String.fromCharCode(0x00d8); break;
                        case 'Ugrave': ch = String.fromCharCode(0x00d9); break;
                        case 'Uacute': ch = String.fromCharCode(0x00da); break;
                        case 'Ucirc': ch = String.fromCharCode(0x00db); break;
                        case 'Uuml': ch = String.fromCharCode(0x00dc); break;
                        case 'Yacute': ch = String.fromCharCode(0x00dd); break;
                        case 'THORN': ch = String.fromCharCode(0x00de); break;
                        case 'szlig': ch = String.fromCharCode(0x00df); break;
                        case 'agrave': ch = String.fromCharCode(0x00e0); break;
                        case 'aacute': ch = String.fromCharCode(0x00e1); break;
                        case 'acirc': ch = String.fromCharCode(0x00e2); break;
                        case 'atilde': ch = String.fromCharCode(0x00e3); break;
                        case 'auml': ch = String.fromCharCode(0x00e4); break;
                        case 'aring': ch = String.fromCharCode(0x00e5); break;
                        case 'aelig': ch = String.fromCharCode(0x00e6); break;
                        case 'ccedil': ch = String.fromCharCode(0x00e7); break;
                        case 'egrave': ch = String.fromCharCode(0x00e8); break;
                        case 'eacute': ch = String.fromCharCode(0x00e9); break;
                        case 'ecirc': ch = String.fromCharCode(0x00ea); break;
                        case 'euml': ch = String.fromCharCode(0x00eb); break;
                        case 'igrave': ch = String.fromCharCode(0x00ec); break;
                        case 'iacute': ch = String.fromCharCode(0x00ed); break;
                        case 'icirc': ch = String.fromCharCode(0x00ee); break;
                        case 'iuml': ch = String.fromCharCode(0x00ef); break;
                        case 'eth': ch = String.fromCharCode(0x00f0); break;
                        case 'ntilde': ch = String.fromCharCode(0x00f1); break;
                        case 'ograve': ch = String.fromCharCode(0x00f2); break;
                        case 'oacute': ch = String.fromCharCode(0x00f3); break;
                        case 'ocirc': ch = String.fromCharCode(0x00f4); break;
                        case 'otilde': ch = String.fromCharCode(0x00f5); break;
                        case 'ouml': ch = String.fromCharCode(0x00f6); break;
                        case 'divide': ch = String.fromCharCode(0x00f7); break;
                        case 'oslash': ch = String.fromCharCode(0x00f8); break;
                        case 'ugrave': ch = String.fromCharCode(0x00f9); break;
                        case 'uacute': ch = String.fromCharCode(0x00fa); break;
                        case 'ucirc': ch = String.fromCharCode(0x00fb); break;
                        case 'uuml': ch = String.fromCharCode(0x00fc); break;
                        case 'yacute': ch = String.fromCharCode(0x00fd); break;
                        case 'thorn': ch = String.fromCharCode(0x00fe); break;
                        case 'yuml': ch = String.fromCharCode(0x00ff); break;
                        case 'OElig': ch = String.fromCharCode(0x0152); break;
                        case 'oelig': ch = String.fromCharCode(0x0153); break;
                        case 'Scaron': ch = String.fromCharCode(0x0160); break;
                        case 'scaron': ch = String.fromCharCode(0x0161); break;
                        case 'Yuml': ch = String.fromCharCode(0x0178); break;
                        case 'fnof': ch = String.fromCharCode(0x0192); break;
                        case 'circ': ch = String.fromCharCode(0x02c6); break;
                        case 'tilde': ch = String.fromCharCode(0x02dc); break;
                        case 'Alpha': ch = String.fromCharCode(0x0391); break;
                        case 'Beta': ch = String.fromCharCode(0x0392); break;
                        case 'Gamma': ch = String.fromCharCode(0x0393); break;
                        case 'Delta': ch = String.fromCharCode(0x0394); break;
                        case 'Epsilon': ch = String.fromCharCode(0x0395); break;
                        case 'Zeta': ch = String.fromCharCode(0x0396); break;
                        case 'Eta': ch = String.fromCharCode(0x0397); break;
                        case 'Theta': ch = String.fromCharCode(0x0398); break;
                        case 'Iota': ch = String.fromCharCode(0x0399); break;
                        case 'Kappa': ch = String.fromCharCode(0x039a); break;
                        case 'Lambda': ch = String.fromCharCode(0x039b); break;
                        case 'Mu': ch = String.fromCharCode(0x039c); break;
                        case 'Nu': ch = String.fromCharCode(0x039d); break;
                        case 'Xi': ch = String.fromCharCode(0x039e); break;
                        case 'Omicron': ch = String.fromCharCode(0x039f); break;
                        case 'Pi': ch = String.fromCharCode(0x03a0); break;
                        case 'Rho': ch = String.fromCharCode(0x03a1); break;
                        case 'Sigma': ch = String.fromCharCode(0x03a3); break;
                        case 'Tau': ch = String.fromCharCode(0x03a4); break;
                        case 'Upsilon': ch = String.fromCharCode(0x03a5); break;
                        case 'Phi': ch = String.fromCharCode(0x03a6); break;
                        case 'Chi': ch = String.fromCharCode(0x03a7); break;
                        case 'Psi': ch = String.fromCharCode(0x03a8); break;
                        case 'Omega': ch = String.fromCharCode(0x03a9); break;
                        case 'alpha': ch = String.fromCharCode(0x03b1); break;
                        case 'beta': ch = String.fromCharCode(0x03b2); break;
                        case 'gamma': ch = String.fromCharCode(0x03b3); break;
                        case 'delta': ch = String.fromCharCode(0x03b4); break;
                        case 'epsilon': ch = String.fromCharCode(0x03b5); break;
                        case 'zeta': ch = String.fromCharCode(0x03b6); break;
                        case 'eta': ch = String.fromCharCode(0x03b7); break;
                        case 'theta': ch = String.fromCharCode(0x03b8); break;
                        case 'iota': ch = String.fromCharCode(0x03b9); break;
                        case 'kappa': ch = String.fromCharCode(0x03ba); break;
                        case 'lambda': ch = String.fromCharCode(0x03bb); break;
                        case 'mu': ch = String.fromCharCode(0x03bc); break;
                        case 'nu': ch = String.fromCharCode(0x03bd); break;
                        case 'xi': ch = String.fromCharCode(0x03be); break;
                        case 'omicron': ch = String.fromCharCode(0x03bf); break;
                        case 'pi': ch = String.fromCharCode(0x03c0); break;
                        case 'rho': ch = String.fromCharCode(0x03c1); break;
                        case 'sigmaf': ch = String.fromCharCode(0x03c2); break;
                        case 'sigma': ch = String.fromCharCode(0x03c3); break;
                        case 'tau': ch = String.fromCharCode(0x03c4); break;
                        case 'upsilon': ch = String.fromCharCode(0x03c5); break;
                        case 'phi': ch = String.fromCharCode(0x03c6); break;
                        case 'chi': ch = String.fromCharCode(0x03c7); break;
                        case 'psi': ch = String.fromCharCode(0x03c8); break;
                        case 'omega': ch = String.fromCharCode(0x03c9); break;
                        case 'thetasym': ch = String.fromCharCode(0x03d1); break;
                        case 'upsih': ch = String.fromCharCode(0x03d2); break;
                        case 'piv': ch = String.fromCharCode(0x03d6); break;
                        case 'ensp': ch = String.fromCharCode(0x2002); break;
                        case 'emsp': ch = String.fromCharCode(0x2003); break;
                        case 'thinsp': ch = String.fromCharCode(0x2009); break;
                        case 'zwnj': ch = String.fromCharCode(0x200c); break;
                        case 'zwj': ch = String.fromCharCode(0x200d); break;
                        case 'lrm': ch = String.fromCharCode(0x200e); break;
                        case 'rlm': ch = String.fromCharCode(0x200f); break;
                        case 'ndash': ch = String.fromCharCode(0x2013); break;
                        case 'mdash': ch = String.fromCharCode(0x2014); break;
                        case 'lsquo': ch = String.fromCharCode(0x2018); break;
                        case 'rsquo': ch = String.fromCharCode(0x2019); break;
                        case 'sbquo': ch = String.fromCharCode(0x201a); break;
                        case 'ldquo': ch = String.fromCharCode(0x201c); break;
                        case 'rdquo': ch = String.fromCharCode(0x201d); break;
                        case 'bdquo': ch = String.fromCharCode(0x201e); break;
                        case 'dagger': ch = String.fromCharCode(0x2020); break;
                        case 'Dagger': ch = String.fromCharCode(0x2021); break;
                        case 'bull': ch = String.fromCharCode(0x2022); break;
                        case 'hellip': ch = String.fromCharCode(0x2026); break;
                        case 'permil': ch = String.fromCharCode(0x2030); break;
                        case 'prime': ch = String.fromCharCode(0x2032); break;
                        case 'Prime': ch = String.fromCharCode(0x2033); break;
                        case 'lsaquo': ch = String.fromCharCode(0x2039); break;
                        case 'rsaquo': ch = String.fromCharCode(0x203a); break;
                        case 'oline': ch = String.fromCharCode(0x203e); break;
                        case 'frasl': ch = String.fromCharCode(0x2044); break;
                        case 'euro': ch = String.fromCharCode(0x20ac); break;
                        case 'image': ch = String.fromCharCode(0x2111); break;
                        case 'weierp': ch = String.fromCharCode(0x2118); break;
                        case 'real': ch = String.fromCharCode(0x211c); break;
                        case 'trade': ch = String.fromCharCode(0x2122); break;
                        case 'alefsym': ch = String.fromCharCode(0x2135); break;
                        case 'larr': ch = String.fromCharCode(0x2190); break;
                        case 'uarr': ch = String.fromCharCode(0x2191); break;
                        case 'rarr': ch = String.fromCharCode(0x2192); break;
                        case 'darr': ch = String.fromCharCode(0x2193); break;
                        case 'harr': ch = String.fromCharCode(0x2194); break;
                        case 'crarr': ch = String.fromCharCode(0x21b5); break;
                        case 'lArr': ch = String.fromCharCode(0x21d0); break;
                        case 'uArr': ch = String.fromCharCode(0x21d1); break;
                        case 'rArr': ch = String.fromCharCode(0x21d2); break;
                        case 'dArr': ch = String.fromCharCode(0x21d3); break;
                        case 'hArr': ch = String.fromCharCode(0x21d4); break;
                        case 'forall': ch = String.fromCharCode(0x2200); break;
                        case 'part': ch = String.fromCharCode(0x2202); break;
                        case 'exist': ch = String.fromCharCode(0x2203); break;
                        case 'empty': ch = String.fromCharCode(0x2205); break;
                        case 'nabla': ch = String.fromCharCode(0x2207); break;
                        case 'isin': ch = String.fromCharCode(0x2208); break;
                        case 'notin': ch = String.fromCharCode(0x2209); break;
                        case 'ni': ch = String.fromCharCode(0x220b); break;
                        case 'prod': ch = String.fromCharCode(0x220f); break;
                        case 'sum': ch = String.fromCharCode(0x2211); break;
                        case 'minus': ch = String.fromCharCode(0x2212); break;
                        case 'lowast': ch = String.fromCharCode(0x2217); break;
                        case 'radic': ch = String.fromCharCode(0x221a); break;
                        case 'prop': ch = String.fromCharCode(0x221d); break;
                        case 'infin': ch = String.fromCharCode(0x221e); break;
                        case 'ang': ch = String.fromCharCode(0x2220); break;
                        case 'and': ch = String.fromCharCode(0x2227); break;
                        case 'or': ch = String.fromCharCode(0x2228); break;
                        case 'cap': ch = String.fromCharCode(0x2229); break;
                        case 'cup': ch = String.fromCharCode(0x222a); break;
                        case 'int': ch = String.fromCharCode(0x222b); break;
                        case 'there4': ch = String.fromCharCode(0x2234); break;
                        case 'sim': ch = String.fromCharCode(0x223c); break;
                        case 'cong': ch = String.fromCharCode(0x2245); break;
                        case 'asymp': ch = String.fromCharCode(0x2248); break;
                        case 'ne': ch = String.fromCharCode(0x2260); break;
                        case 'equiv': ch = String.fromCharCode(0x2261); break;
                        case 'le': ch = String.fromCharCode(0x2264); break;
                        case 'ge': ch = String.fromCharCode(0x2265); break;
                        case 'sub': ch = String.fromCharCode(0x2282); break;
                        case 'sup': ch = String.fromCharCode(0x2283); break;
                        case 'nsub': ch = String.fromCharCode(0x2284); break;
                        case 'sube': ch = String.fromCharCode(0x2286); break;
                        case 'supe': ch = String.fromCharCode(0x2287); break;
                        case 'oplus': ch = String.fromCharCode(0x2295); break;
                        case 'otimes': ch = String.fromCharCode(0x2297); break;
                        case 'perp': ch = String.fromCharCode(0x22a5); break;
                        case 'sdot': ch = String.fromCharCode(0x22c5); break;
                        case 'lceil': ch = String.fromCharCode(0x2308); break;
                        case 'rceil': ch = String.fromCharCode(0x2309); break;
                        case 'lfloor': ch = String.fromCharCode(0x230a); break;
                        case 'rfloor': ch = String.fromCharCode(0x230b); break;
                        case 'lang': ch = String.fromCharCode(0x2329); break;
                        case 'rang': ch = String.fromCharCode(0x232a); break;
                        case 'loz': ch = String.fromCharCode(0x25ca); break;
                        case 'spades': ch = String.fromCharCode(0x2660); break;
                        case 'clubs': ch = String.fromCharCode(0x2663); break;
                        case 'hearts': ch = String.fromCharCode(0x2665); break;
                        case 'diams': ch = String.fromCharCode(0x2666); break;
                        default: notVlaid = true; break;
                    }
                }
                if (notVlaid)
                    i = i + 1;
                else
                    i = semicolonIndex;
            }
        }
        out += ch;
    }
    return out;
}
function restoreFormDataReTake(resDemoData) {
    formDataRestore = resDemoData.split('|');
    for (var ix = 0; ix < getFormElements().length; ix++) {
        aSrc = getElement(ix);
        if (aSrc.name) {
            if (aSrc.name.toLowerCase().indexOf('ext_') > -1) {
                for (var iy = 0; iy < formDataRestore.length; iy++) {
                    if (formDataRestore[iy].toLowerCase().indexOf(aSrc.name.toLowerCase() + ":") > -1) {
                        dataElem = formDataRestore[iy].split(':');
                        switch (aSrc.type.toLowerCase()) {
                            case "text":
                                try { aSrc.value = dataElem[1]; } catch (e) { }
                                break;
                            case "checkbox":
                                try {
                                    aSrc.checked = true;
                                } catch (e) { }
                                break;
                            case "select-one":
                                try { setDropDown(aSrc, dataElem[1]); } catch (e) { }
                                break;
                            case "radio":
                                try {
                                    aSrc.checked = true;
                                } catch (e) { }
                                break;
                        }
                    }
                }
            }
        }
    }
}
function trg_HideShow() {
    for (var ix = 0; ix < getFormElements().length; ix++) {
        aSrc = getElement(ix);
        try {
            switch (aSrc.type) {
                case "checkbox":
                case "radio":
                    var chg = '';
                    if (aSrc.onclick) {
                        if (aSrc.checked) {
                            try {
                                aSrc.click();
                                aSrc.click();
                            }
                            catch (e) { }
                        }
                    }
                    break;
                case "select-one":
                    var chg = '';
                    if (aSrc.onchange) {
                        if (!checkHidden2(aSrc)) {
                            try {
                                aSrc.onchange();
                            }
                            catch (e) { }
                        }
                    }
                    break;
                default:
                    break;
            }
        }
        catch (e) { }
    }
}
function saveRankSort(SortList, SortField) {
    getElement(SortField).value = $("#" + SortList).sortable('toArray').join('|');
    updRankSortId(SortList)
}
function updRankSortId(SortList) {
    lineNo = 0;
    $("#" + SortList + " li").each(function(index) {
        if ($(this).find(".spRankn").length > 0) {
            $(this).find(".spRankn").html("");
            lineNo = lineNo + 1;
            $(this).find('.spRankn').html(lineNo + ".&nbsp;");
        }
    });
}
function blankRankSortId(SortList) {
    $("#" + SortList + " li").each(function(index) {
        if ($(this).find(".spRankn").length > 0) {
            $(this).find(".spRankn").html("");
        }
    });
}
var saveFilterAnsValue = new Array(5000)
var saveFilterAnsText = new Array(5000)
var saveFilterCount = 0;
//
function filterClick(aObj, ansId, filterQ) {
    dropDownQuest = false;
    //if dropdown filtering works differently
    trgObj = getElement('DropDown_' + filterQ);
    if (trgObj != null) {

        if (trgObj.type == "select-one")
            dropDownQuest = true;
    }
    if (dropDownQuest) {
        if (aObj.checked) {
            for (x = 0; x < saveFilterCount; x++) {
                if (saveFilterAnsValue[x] == ansId + ':0') {
                    oNewOption = new Option();
                    oNewOption.text = saveFilterAnsText[x];
                    oNewOption.value = saveFilterAnsValue[x];
                    trgObj.options.add(oNewOption);
                    break;
                }
            }
        }
        else {
            for (i = trgObj.options.length - 1; i >= 0; i--) {
                if (trgObj[i].value == ansId + ':0')
                    trgObj.remove(i);
            }
        }
    }
    else {
        if (aObj) {
            if (aObj.checked)
                getElement('ARow' + ansId).style.display = '';
            else {
                getElement('ARow' + ansId).style.display = 'none';
                initHiddenElements(getElement('ARow' + ansId)); //uncheck radio and check boxes if row hidden
            }
        }
    }
}
function initFilterClick(ansId, filterQ) {
    trgObj = getElement('DropDown_' + filterQ);
    if (trgObj != null) {
        if (trgObj.type == "select-one") {

            for (i = 0; i < trgObj.options.length; i++) {
                if (Trim1(trgObj[i].text).length > 0) {
                    saveFilterAnsValue[saveFilterCount] = trgObj[i].value;
                    saveFilterAnsText[saveFilterCount] = trgObj[i].text;
                    saveFilterCount++;
                    trgObj.remove(i);
                }
            }
        }
        else
            try { getElement('ARow' + ansId).style.display = 'none'; } catch (e) { }
    }
    else
        try { getElement('ARow' + ansId).style.display = 'none'; } catch (e) { }

}
//used to restore page elements when page re-loaded
function restorePageElements(aSrc, Value, Name) {
    if (aSrc.length > 0)
        type = aSrc[0].type;
    else
        type = aSrc.type;
    if (type != null) {
        switch (type.toLowerCase()) {
            case 'radio':
                setRadio(Name, Value);
                break;
            case 'checkbox':
                aSrc.checked = true;
                break;
            default:
                aSrc.value = Value;
                break;
        }
    }
    else
        aSrc.value = Value;
}
//
// Start Survey page object
//
var Utils = {

    caculateAgeInYears: function(dd, mm, yy) {
        var now = new Date(); years = 0;
        bDay = dd + "/" + mm + "/" + yy;
        bD = bDay.split('/');
        if (bD.length == 3) {
            born = new Date(bD[2], bD[1] * 1 - 1, bD[0]);
            years = Math.floor((now.getTime() - born.getTime()) / (365.25 * 24 * 60 * 60 * 1000));
        }
        return years;
    },
    caculateAgeFromYear: function(date) {
        year = 0;
        if (date.length >= 4) {
            var d = new Date();
            year = parseInt(date.substring(0, 4));
            year = d.getFullYear() - year;
        }
        return year;
    },
    attachEvent: function(target, eventName, handlerName) {

        switch (eventName) {
            case 'onblur':
                target.onblur = handlerName;
                break;
            case 'onclick':
                target.onclick = handlerName;
                break;
            case 'onchange':
                target.onchange = handlerName;
                break;
            case 'onkeyup':
                target.onkeyup = handlerName;
                break;
            default:
                break;
        }
    },
    calculateAgeFromYear: function(date) {
        year = 0;
        if (date.length >= 4) {
            var d = new Date();
            year = parseInt(date.substring(0, 4));
            year = d.getFullYear() - year;
        }
        return year;
    },
    validateWithRegex: function(aFiledName, regExpression, msg) {
        aObj = Survey.fieldValue(aFiledName);
        var Regx = new RegExp(regExpression);
        if (!Regx.test(aObj.value)) {
            if (msg.length > 0)
                PageError.add(aFiledName, msg);
            return false;
        }
        else
            return true;
    },
    validateWithRegexForFreeText: function(QuestionId, regExpression, msg) {
        if (Survey.fieldValue('ShortFreeText_' + QuestionId))
            aObj = Survey.fieldValue('ShortFreeText_' + QuestionId);
        else
            aObj = Survey.fieldValue('FreeText_' + QuestionId);
        var Regx = new RegExp(regExpression);
        if (!Regx.test(aObj.value)) {
            if (msg.length > 0)
                PageError.addQuestionError(QuestionId, msg);
            return false;
        }
        else
            return true;
    },
    openWindow: function(aPage, aPageID, iWidth, iHeight) {
        var sWindowInfo = "";
        sWindowInfo = "resizable=yes,width=" + iWidth + ",height=" + iHeight + ",top=" + (window.screenTop + 10) + ",left=" + (window.screenLeft + 10) + ",toolbar=no, status=yes, scrollbars=yes"
        var aWin = window.open(aPage, aPageID, sWindowInfo);
        if (aWin.focus)
            aWin.focus();
        return aWin;
    },
    setRadioClick: function(aName, aValue) {
        if (getElementByName(aName)) {
            var ix = 0;
            var found = false
            if (getElementByName(aName).length) {
                while (ix < getElementByName(aName).length && !found) {
                    if (getElementByName(aName)[ix].value.indexOf(aValue) > -1) {
                        getElementByName(aName)[ix].checked = true;
                        try { getElementByName(aName)[ix].onClick(); }
                        catch (e) { if (advancedLogicDebug) alert('setRadioClick failed: ' + e.message) }
                        found = true;
                    }
                    ix++;
                }
            }
            else {
                if (getElement(aName).value.indexOf(aValue) > -1) {
                    getElement(aName).checked = true;
                    try { getElement(aName).onClick(); }
                    catch (e) { if (advancedLogicDebug) alert('setRadioClick failed: ' + e.message) }
                }
            }
        }
    }
}
var Question = {
    getAnswerClickTotal: function(QuestionSeq) {
        values = QuestionSeq.split('.');
        if (values.length == 4)
            xx = eval(values[0] + ".a" + values[1] + "_e" + values[2] + "_" + values[3]);
        if (values.length == 3)
            xx = eval(values[0] + ".a" + values[1] + "_e" + values[2]);
        if (values.length == 2)
            xx = eval(values[0] + ".a" + values[1]);
        if (values.length == 1)
            xx = eval(values[0]);
        //
        try {
            yy = parseInt(xx);
            if (isNaN(xx))
                yy = 0;
        }
        catch (e) {
            yy = 0;
        }
        return yy;
    },
    hideColumn: function(qSeq,colSeq)
    {
        colId = ".Q" + qSeq + "Col" + colSeq;
        $(colId).hide();
    },
    showColumn: function (qSeq, colSeq) {
        colId = ".Q" + qSeq + "Col" + colSeq;
        $(colId).show();
    },
    initFilteredAns: function (ansId, filterQ,Line) {
        //hide answers on filtered questions
        //$('#M_' + Line).hide(); //hide line question is on
        trgObj = getElement('DropDown_' + filterQ);
        if (trgObj != null) {
            if (trgObj.type == "select-one") {

                for (i = 0; i < trgObj.options.length; i++) {
                    if (Trim1(trgObj[i].text).length > 0) {
                        saveFilterAnsValue[saveFilterCount] = trgObj[i].value;
                        saveFilterAnsText[saveFilterCount] = trgObj[i].text;
                        saveFilterCount++;
                        trgObj.remove(i);
                    }
                }
            }
            else
                try { getElement('ARow' + ansId).style.display = 'none'; } catch (e) { }
        }
        else
            try { getElement('ARow' + ansId).style.display = 'none'; } catch (e) { }
    },
    bindFilteredClickEvent: function (ansId, fun, qType) {
        elName = Question.rsolveAnsId(ansId, qType);
        $("input[name='" + elName + "']").bind("click", fun);
    },
    processFilterClick: function (ansId, filterQ,Line,QSeq,aObj) {
        if (!aObj) //element which raised the click will be passed in othwewise it will be passed in firefox etc
            aObj = event.srcElement;
        name = aObj.name;
        dropDownQuest = false;
        //if dropdown filtering works differently
        trgObj = getElement('DropDown_' + filterQ);
        if (trgObj != null) {

            if (trgObj.type == "select-one")
                dropDownQuest = true;
        }
        if (dropDownQuest) {
            if (aObj.checked) {
                for (x = 0; x < saveFilterCount; x++) {
                    if (saveFilterAnsValue[x] == ansId + ':0') {
                        oNewOption = new Option();
                        oNewOption.text = saveFilterAnsText[x];
                        oNewOption.value = saveFilterAnsValue[x];
                        trgObj.options.add(oNewOption);
                        break;
                    }
                }
            }
            else {
                for (i = trgObj.options.length - 1; i >= 0; i--) {
                    if (trgObj[i].value == ansId + ':0')
                        trgObj.remove(i);
                }
            }
            if (trgObj.length>0)
                $('#M_' + Line).show(); //show line question is on
            else
                $('#M_' + Line).hide(); //hide line question is on
        }
        else {
            isChecked = false;
            //isChecked = aObj.checked;
            inpCollection = $("input[name='" + name + "']");
            for (ix = 0; ix < inpCollection.length; ix++) {
                if (inpCollection[ix].checked)
                    isChecked = true;
            }
            if (isChecked)
                getElement('ARow' + ansId).style.display = '';
            else {
                getElement('ARow' + ansId).style.display = 'none';
                initHiddenElements(getElement('ARow' + ansId)); //uncheck radio and check boxes if row hidden
            }
            checkedCount=0;
        }
    },
    processFilterClickLogic: function (ruleOK, ansId) {
        if (ruleOK)
            getElement('ARow' + ansId).style.display = '';
        else {
            getElement('ARow' + ansId).style.display = 'none';
            initHiddenElements(getElement('ARow' + ansId)); //uncheck radio and check boxes if row hidden
        }
        checkedCount = 0;
    },
    processFilterClickLogicDropDown: function (ruleOK, ansId) {
        if (ruleOK)
            getElement('ARow' + ansId).style.display = '';
        else {
            getElement('ARow' + ansId).style.display = 'none';
            initHiddenElements(getElement('ARow' + ansId)); //uncheck radio and check boxes if row hidden
        }
        checkedCount = 0;
    },
    rsolveAnsId: function (ansId,qType) {
        switch (qType) {
            case "CheckBox":
                return 'Check_' + ansId;
                break;
            case "LikertText":
                return 'RadioL_' + ansId;
                break;
            case "LikertTextMatrix":
                return 'Checkl_' + ansId;
                break;
            case "Radio":
                return 'Radio_' + ansId;
                break;
        }
    },
    getClickTotal: function (QSequence) {
        question = ".Q" + QSequence;
        cTotal = 0;
        for (ix = 0; ix < $(question).length; ix++)
        {
            if ($(question)[ix].checked)
                cTotal++;
        }
        return cTotal;
    },
    initFileUpload: function (zoneId, site, surveyId, questionId, Seq, Organization, FileList) {
            regexString = "(\.|\/)(" + FileList + ")$"
            var fileRegex = new RegExp(regexString, "i");
            $('#FU_' + questionId).fileupload({
                dataType: 'json',
                singleFileUploads: true,
                autoUpload: true,
                done: function (e, data) {
                    $('#FileUpload_' + questionId)[0].value = $('<div/>').text(data.jqXHR.responseText).html().replace(/"/g, "&quot;").replace(/:/g, "~").replace(/\[/g, "¬").replace(/\]/g, "⌐"); //encode 
                    $('#FUProgress_' + questionId + ' .fubar').css('width',  '100%');
                    $('#FUProgress_' + questionId + ' .fubar').html('&nbsp;100%');
                    $('#FUBtn_' + questionId).hide();
                   
                },
                fail: function (e, data) {
                    alert('failed');
                },
                progressall: function (e, data) {
                    var progress = parseInt(data.loaded / data.total * 100, 10);
                    if (progress <= 99) {
                        $('#FUProgress_' + questionId + ' .fubar').css('width', progress + '%');
                        $('#FUProgress_' + questionId + ' .fubar').html('&nbsp;' + progress + '%');
                    }
                }
            });
            $('#FU_' + questionId).bind('fileuploadadd', function (e, data) {
                if (fileRegex.test(data.files[0].name)) {
                    PageError.clearInLineErrors();
                    return true;
                }
                else {
                    PageError.addQuestionError(questionId, SurveyInvFileType)
                    return false;
                }
            })
            $('#FUBtn_' + questionId).bind("click", function () {
                $('#FU_' + questionId).click();
            });
    }
}

var Survey = {
    setPipeText: function(placeHolder, value) {
        try { setPlaceHolder(placeHolder, unescape(value)); setPipedText(placeHolder); }
        catch (e) { };
    },
    saveSurvey: function (SurveyId, InstanceId, SaveWindow, Org, LanCode) {
        if (!LanCode)
            LanCode = 'EN';
        Survey.createCookie('sctx' + SurveyId, InstanceId + '|' + '00000000-0000-0000-0000-000000000000', 20);
        if (SaveWindow) {
            //var aWin = Utils.openWindow('../run/SaveS.aspx?SurveyId=' + SurveyId + '&instanceid=' + InstanceId + '&ox=' + Org, 'save', 700, 600)
            // aWin.focus();
            document.location = '../run/SaveS.aspx?SurveyId=' + SurveyId + '&instanceid=' + InstanceId + '&ox=' + Org +'&ml=' + LanCode;
        }
    },
    saveSurveySetResumePage: function(SurveyId, InstanceId, ResumePageId) {
        Survey.createCookie('sctx' + SurveyId, InstanceId + '|' + ResumePageId, 90);
    },
    submitPage: function(submitPage) {
        if (submitPage) {
            pageEffect();
            document.SurveyForm.submit();
            try {
                if (navigator.appName == 'Microsoft Internet Explorer')
                    if (event) event.returnValue = false;
            } catch (e) { }
        }
        else
            PageButtons.enableAll();
    },
    fieldValue: function(elementName) {
        var elem;
        if (navigator.appName == 'Microsoft Internet Explorer')
            elem = document.all(elementName);
        else {
            if (navigator.appName == 'Opera')
                elem = document.forms[0].elements[elementName];
            else {
                elem = document.getElementById(elementName);
                if (elem == null) // get element by index number
                    elem = document.forms[0].elements[elementName];
            }
        }
        return elem;
    },
    selectAnswer: function(QType, Question, AnsId, AnsSeq, AnsMax, QSeq) {
        switch (QType) {
            case 0: // QuestionType.Radio
            case 120: // QuestionType.Radio
                Utils.setRadioClick('Radio_' + Question, AnsId);
                break;
            case 20: // QuestionType.Checkbox
                getElement('Check_' + AnsId).checked = true;
                //add to state bag use version which by passes page loading check
                try {

                    Survey.addRemoveQuestionStateIn(getElement('Check_' + AnsId), QSeq + '.' + AnsSeq, true);
                }
                catch (e) { }
                //this does not execute should be removed.
                try { getElement('Check_' + AnsId).onClick(); }
                catch (e) { if (advancedLogicDebug) alert('SelectAnswer checkbox failed: ' + e.message) }
                break;
        }
    },
    checkAnswer: function(QType, Question, AnsId, AnsSeq, AnsMax) {
        switch (QType) {
            case 0: // QuestionType.Radio
                return getElementByName('Radio_' + Question)[AnsSeq].checked;
                break;
            case 20: // QuestionType.Checkbox
                return getElement('Check_' + AnsId).checked;
                break;
            case 50: // QuestionType.LikertText
            case 170: // QuestionType.LikertTextScale
            case 200: // QuestionType.NetPromoter
                if (AnsMax == -1) //check if any item on the line selected
                {
                    for (ix = 0; ix < getElementByName('RadioL_' + AnsId).length; ix++) {
                        if (getElementByName('RadioL_' + AnsId)[ix].checked)
                            return true;
                    }
                    return false;
                }
                else
                    return getElementByName('RadioL_' + AnsId)[AnsMax].checked;
                break;
            case 90: // Rank
                return Survey.fieldValueNumeric('RankQ_' + AnsId);
            case 30: // Allocation
                return Survey.fieldValueNumeric('AllocQ_' + AnsId);
            case 40: // drop down
                aSrc = getElement('DropDown_' + Question);
                return Trim1(aSrc.options[aSrc.selectedIndex].text);
                break;
            case 80: // ShortFreeText_
                aSrc = Trim1(getElement('ShortFreeText_' + Question).value);
                return aSrc;
                break;
            case 60: // Freetext
                aSrc = Trim1(getElement('FreeText_' + Question).value);
                return aSrc;
                break;
        }
    },
    setPhantomAnswer: function(QType, Question, AnsId, AnsSeq, AnsMax, QuestSeq) {
        switch (QType) {
            case 0: // QuestionType.Radio
                getElement('__QueueData').value += '|radio_' + AnsId + ':0:0:Radio_' + Question;
                //persist to state bag
                if (QuestSeq != undefined && AnsSeq != undefined) {
                    if (!isNaN(QuestSeq) && !isNaN(AnsSeq))
                        try { Survey.addRemoveQuestionStateSingle(null, QuestSeq + '.' + AnsSeq); } catch (e) { }
                }
                break;
            case 20: // QuestionType.CheckBox |Check_8ac3807a-fc6c-4d2c-a63e-2fc6b9b6c9f7:0|Check_6945aec4-71e2-45e9-91b6-b21290fd5304:0
                getElement('__QueueData').value += '|Check_' + AnsId + ':0';
                //persist to state bag
                if (QuestSeq != undefined && AnsSeq != undefined) {
                    if (!isNaN(QuestSeq) && !isNaN(AnsSeq))
                        try { Survey.addRemoveQuestionState(null, QuestSeq + '.' + AnsSeq); } catch (e) { }
                }
                break;
        }
    },
    removePhantomAnswer: function(QType, Question, AnsId, AnsSeq, AnsMax) {
        switch (QType) {
            case 0: // QuestionType.Radio
                getElement('__QueueData').value = getElement('__QueueData').value.replace('|radio_' + AnsId + ':0:0:Radio_' + Question, '');
                break;
            case 20: // QuestionType.CheckBox |Check_8ac3807a-fc6c-4d2c-a63e-2fc6b9b6c9f7:0|Check_6945aec4-71e2-45e9-91b6-b21290fd5304:0
                getElement('__QueueData').value = getElement('__QueueData').value.replace('|Check_' + AnsId + ':0', '');
                break;
        }
    },
    // validate allocation question
    fieldValueNumeric: function(elementName) {
        var val = 0;
        try {
            if (getElement(elementName).tagName.toLowerCase() == "select")
                val1 = Survey.formatInteger(getElement(elementName)[getElement(elementName).selectedIndex]);
            else
                val1 = Survey.formatInteger(getElement(elementName));
            val = parseInt(val1);
        }
        catch (e) {
            val = 0;
        }
        //initialize to 0 
        if (isNaN(val))
            val = 0;
        return val;
    },
    formatInteger: function(aVal1) {
        var aVal = aVal1.value.toString().replace(groupSep, '').replace(decSep, '');
        aVal1.value = aVal;
        return aVal;
    },
    getQueryStringValue: function(name, defaultVal) {
        if (defaultVal == null || defaultVal.toLowerCase() == 'undefined')
            defaultVal = '';
        var qs = new Querystring(true);
        return qs.get(name, defaultVal);
    },
    getQueryStringValueRaw: function(name) {
        var qs = new Querystring(false);
        return qs.get(name, '');
    },
    createCookie: function(name, value, days) {
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            var expires = "; expires=" + date.toGMTString();
        }
        else var expires = "";
        document.cookie = name + "=" + value + expires + "; path=/";
    },
    readCookie: function(cookieName) {
        var theCookie = "" + document.cookie;
        var ind = theCookie.indexOf(cookieName);
        if (ind == -1 || cookieName == "") return "";
        var ind1 = theCookie.indexOf(';', ind);
        if (ind1 == -1) ind1 = theCookie.length;
        return unescape(theCookie.substring(ind + cookieName.length + 1, ind1));
    },
    generateRandonNumberList: function(max, listLength) {
        var list = new Array(listLength);
        var iy = 0;
        for (var ix = 0; ix < list.length; ix++)
            list[ix] = -1;
        //debug = '';
        //
        while (iy < listLength) {
            var rand_no = Math.floor(max * Math.random())
            for (var ix = 0; ix < list.length; ix++) {
                if (list[ix] == rand_no)
                    break;
                if (list[ix] == -1) {
                    list[ix] = rand_no;
                    iy++;
                    //debug = debug + rand_no + ' ';
                    break;
                }
            }
        }
        return list;
    },
    randomHideAnswerLines: function(numAnsToHide, ansList) {
        maxNumber = ansList.length
        var list = Survey.generateRandonNumberList(maxNumber, numAnsToHide)
        for (var ix = 0; ix < list.length; ix++) {
            Survey.hideAnswerLines(ansList[list[ix]]);
        }
        return list;
    },
    randomHideAnswerLinesOddEvenColor: function(numAnsToHide, ansList, evenColor, oddColor) {
        rList = Survey.randomHideAnswerLines(numAnsToHide, ansList);
        //set odd even color
        odd = true;
        for (var ix = 0; ix < ansList.length; ix++) {
            try {
                curElement = getElement('ARow' + ansList[ix]);
                if (curElement.style.display != 'none') {
                    if (odd) {
                        if (oddColor.length > 0)
                            curElement.style.backgroundColor = oddColor;
                        odd = false;
                    }
                    else {
                        if (evenColor.length > 0)
                            curElement.style.backgroundColor = evenColor;
                        odd = true;
                    }
                }
            } catch (e) { }

        }

    },
    randomizeArray: function(arrayList) {
        var retList = new Array(arrayList.length);
        maxNumber = arrayList.length
        var list = Survey.generateRandonNumberList(maxNumber, arrayList.length)
        for (var ix = 0; ix < list.length; ix++) {
            retList[ix] = arrayList[list[ix]];
        }

        return retList;
    },
    setNextPageFromArrayList: function(pageListArray, defaultNextPage) {
        remainingPages = '';
        if (pageListArray.length >= 1) {

            if (pageListArray[0].length > 0) {
                Survey.setNextPage(pageListArray[0]);
                for (var ix = 1; ix < pageListArray.length; ix++) {
                    if (ix + 1 < pageListArray.length)
                        remainingPages += pageListArray[ix] + ',';
                    else
                        remainingPages += pageListArray[ix];
                }
            }
            else
                Survey.setNextPage(defaultNextPage);
        }
        else
            Survey.setNextPage(defaultNextPage);
        return remainingPages;
    },
    addToFavorites: function() {
        try {
            if (window.sidebar) { // Mozilla Firefox Bookmark
                window.sidebar.addPanel(document.title, location.href, "");
            }
            else {
                if (window.external) { // IE Favorite
                    window.external.AddFavorite(location.href, document.title);
                }
                else
                    alert('To save this survey so you can finish later just bookmark the page.');
            }
        }
        catch (e) { alert('To save this survey so you can finish later just bookmark the page.'); }
    },
    resumeSurvey: function() {
        url = document.location.toString().substring(0, document.location.toString().lastIndexOf('/')) +
            '/SR.aspx?SurveyId=' + getElement('__SurveyId').value + '&PageId=' +
            getElement('__PageId').value + '&Ox=' + getElement('__Ox').value + '&EM=' +
            getElement('__em').value + '&InstanceId=' + getElement('__InstanceId').value
        mail_str = "mailto:?subject=Saved Survey Link.";
        mail_str += "&body=You have saved a survey in progress. ";
        mail_str += "You can resume by clicking the following link: " + escape(url);
        location.href = mail_str;
    },
    expired: function() {
        document.location = Survey.fieldValue('__ExpUrl').value;
    },
    hideSurveyLines: function(lineList, clearOnPageSubmit) {
        if (clearOnPageSubmit == undefined)
            clearOnPageSubmit = false;
        lines = lineList.split(',');
        for (var ix = 0; ix < lines.length; ix++) {
            try {
                lineId = 'M_DetailsLine' + lines[ix];
                getElement('M_DetailsLine' + lines[ix]).style.display = 'none';
                if (!clearOnPageSubmit)//if added to list then this will not be cleared on pagesubmit
                    getElement('__InitHiddenQ').value = getElement('__InitHiddenQ').value + '|' + lineId;
            } catch (e) { }
        }
    },
    hideAnswerLines: function(lineList) {
        lines = lineList.split(',');
        for (var ix = 0; ix < lines.length; ix++) {
            try { getElement('ARow' + lines[ix]).style.display = 'none'; } catch (e) { }
        }
    },
    showAnswerLines: function(lineList) {
        lines = lineList.split(',');
        for (var ix = 0; ix < lines.length; ix++) {
            try { getElement('ARow' + lines[ix]).style.display = ''; } catch (e) { }
        }
    },
    showSurveyLines: function(lineList) {
        lines = lineList.split(',');
        for (var ix = 0; ix < lines.length; ix++) {
            try { getElement('M_DetailsLine' + lines[ix]).style.display = ''; } catch (e) { }
        }
    },
    setLanguageCode: function(LanCode, ReloadPage) {
        Survey.fieldValue('__MultiLan').value = LanCode;
        if (ReloadPage) {
            curLan = Survey.getQueryStringValue('ML');
            if (curLan.toUpperCase() != LanCode.toUpperCase()) {
                reloadUrl = document.URL;
                reloadUrl = reloadUrl.replace('&ML=' + curLan, '');
                reloadUrl = reloadUrl.replace('&ml=' + curLan, '');
                reloadUrl = reloadUrl + "&ml=" + LanCode.toUpperCase();
                document.location = reloadUrl;
            }
        }
    },
    setNextPage: function(page) {
        getElement('__Next').value = page;
        getElement('__Status').value = '0';
    },
    setNextPageUrl: function(page, url) {
        getElement('__Next').value = page;
        getElement('__Status').value = '0';
    },
    setFinishPage: function(page) {
        getElement('__Next').value = '';
        getElement('__LastPageId').value = page;
        getElement('__Status').value = '10';
    },
    setFinishURL: function(url) {
        getElement('__LastURL').value = url;
    },
    //set multi select checkbox type
    addRemoveQuestionStateIn: function(aobj, stateValue) {

        stateValue = 'Q' + stateValue;
        var state = getElement('__QState').value;
        state = state.replace(stateValue + '|', '')
        if (aobj.checked)
            state += stateValue + "|";
        getElement('__QState').value = state;
    },
    addRemoveQuestionState: function(aobj, stateValue) {
        switch (aobj.type.toLowerCase()) {
            case "text": //text boxes attached to the check box question is triggering addRemoveQuestionState
                break;
            default:
                if (!pageLoading || surveyPageLoadedScriptRunning)
                    Survey.addRemoveQuestionStateIn(aobj, stateValue);
                break;
        }
    },
    //set single select radio/drop down
    addRemoveQuestionStateSingle: function(aobj, stateValue) {
        if (!pageLoading || surveyPageLoadedScriptRunning) {
            stateValue = 'Q' + stateValue;
            if (aobj) { //if null being called from code advanced logic no object availiable
                if (aobj.type == "select-one") {
                    //adjust index for dropdown question if headings used
                    //                    headOffset = 0
                    //                    for (var is = 0; is < aobj.selectedIndex; is++) {
                    //                        if (aobj[is].className == 'dropHead')
                    //                            headOffset++;
                    //                    }
                    //stateValue = stateValue + '.' + (aobj.selectedIndex - headOffset);
                    stateValue = stateValue + '.' + aobj[aobj.selectedIndex].value.split(':')[2];
                }
            }
            statePart = stateValue.split('.');
            var removeQuestion = statePart[0] + '.';
            var clearEnteriesUpTo = statePart[0] + '.';

            if (statePart.length > 1)
                clearEnteriesUpTo = statePart[0] + '.' + statePart[1] + '.';
            if (statePart.length > 2)
                removeQuestion = statePart[0] + '.' + statePart[1] + '.';
            //rebuild state removing all entries for this question
            var statevalues = getElement('__QState').value.split('|');
            var state = '';
            //remove all question entries form the state bag
            for (var ix = 0; ix < statevalues.length; ix++) {

                if (statevalues[ix].indexOf(removeQuestion) > -1 && statevalues[ix].length > 0)
                    statevalues[ix] = '';
            }
            //Add to state bag
            for (var ix = 0; ix < statevalues.length; ix++) {

                if (statevalues[ix].indexOf(clearEnteriesUpTo) == -1 && statevalues[ix].length > 0)
                    state += statevalues[ix] + '|';
            }
            getElement('__QState').value = state + stateValue + '|';
        }
    },

    checkAnswerInStateBag: function(value) {
        if (getElement('__QState').value.indexOf(value + '|') > -1)
            return true;
        else
            return false;
    }
}
//
// End Survey page object
//
var PageButtons = {
    checkDoubleSubmit: function() {
        if (ctlSubmitCount > 0) {
            ctlSubmitCount++;

            return true;
        }
        else {
            ctlSubmitCount++;

            return false;
        }
    },
    disableAll: function() {
        alreadySubmitted = false;
        for (var ix = 0; ix < ctlButtons.length; ix++) {
            if (getElement(ctlButtons[ix]).disabled)
                alreadySubmitted = true;
            getElement(ctlButtons[ix]).disabled = true;
        }
        return alreadySubmitted;
    },
    enableAll: function() {
        ctlSubmitCount = 0; //if buttons are being re-enabled the set click count back to 0
        for (var ix = 0; ix < ctlButtons.length; ix++) {
            getElement(ctlButtons[ix]).disabled = false;
        }
    }
}
//Question Validation
var QValidation = {
    testMatrixSelection: function(aObj, id, MaxSel) {
        selected = 0;
        thisId = $(aObj)[0].id;
        len = $("." + id).length;
        for (var ix = 0; ix < len; ix++) {
            if ($("." + id)[ix].checked)
                selected++;
        }
        //have to use disable and enable click events not reliable
        if (m_BlueButtons) {
            for (var ix = 0; ix < len; ix++) {
                //ensure selected value is and input button not container cell
                if ($("." + id)[ix].tagName.toLowerCase() == "input")
                {
                    cId = $("." + id)[ix].id;
                    if (thisId != cId && $("." + id)[ix].id.length > 0) {
                        if (selected >= MaxSel) {
                            if (!$("#" + cId)[0].checked)
                                $("#" + cId).iCheck('disable');
                        }
                        else {
                            if ($("#" + cId)[0].disabled)
                                $("#" + cId).iCheck('enable');
                        }
                    }
                }
            }
        }
        else {
            if (selected > MaxSel) {
                for (var ix = 0; ix < len; ix++) {
                    if (selected > MaxSel) {
                        cId = $("." + id)[ix].id;
                        if (thisId != cId && $("." + id)[ix].id.length > 0) {
                            if ($("#" + cId)[0].checked) {
                                $("#" + cId)[0].click();
                                selected--;
                            }
                        }
                    }
                }
            }
        }
    },
    chkCheckBoxExclusive: function (exclusiveId, questionSequence) {
        $(document).ready(function () {
            questionSequence = "QI" + questionSequence;
            if (SurveyState.getValue("ntBtnStyle") != "0" && SurveyState.getValue("ntBtnStyle").length > 0) //blue buttons
                QValidation.chkCheckBoxExclusiveBlueButtons(exclusiveId, questionSequence,true);
            else
                QValidation.chkCheckBoxExclusiveStdButtons(exclusiveId, questionSequence,true);
        });
    },
    chkCheckBoxExclusiveByCol: function (exclusiveId, questionSequence) {
        $(document).ready(function () {
            questionSequence = "Q" + questionSequence;
            if (SurveyState.getValue("ntBtnStyle") != "0" && SurveyState.getValue("ntBtnStyle").length > 0) //blue buttons
                QValidation.chkCheckBoxExclusiveBlueButtons(exclusiveId, questionSequence,false);
            else
                QValidation.chkCheckBoxExclusiveStdButtons(exclusiveId, questionSequence,true);
        });
    },
    chkCheckBoxExclusiveBlueButtons: function (exclusiveId, questionSequence,clearAllAnswers) {
        questionSeq = questionSequence;
        $("." + questionSeq).on("ifChecked", function (event) {
            selId = event.target.id;
            if (exclusiveId == selId) /*Exclusive selected*/ {
                if (clearAllAnswers)
                    questionSeqClass = QValidation.getQuestionSeqClassFromList(selId); //get QI class so you can select rest of answers..
                else
                    questionSeqClass = questionSequence; //only clear column not whole question
                $("." + questionSeqClass).each(function () {
                    if ($(this)[0].checked && $(this)[0].id != exclusiveId) {
                        $("#" + $(this)[0].id).click(); //required if hide and show are used of of an exclusive question
                        $("#" + $(this)[0].id).iCheck('uncheck');
                    }
                });
            }
            else
            {
                if ($("#" + exclusiveId)[0].checked){
                    // $("#" + $(this)[0].id).click(); //breaks hide show required two clicks to trigger..
                    $("#" + exclusiveId).iCheck('uncheck');
                }
            }
        });
    },
    chkCheckBoxExclusiveStdButtons: function (exclusiveId, questionSequence,clearAllAnswers) {
        /*Courses which can only select one at a time*/
        //exclusiveId = "Check_499ab931-9db2-4b39-8a4f-b3f87797fb94";
        //questionSeq = "QI" + questionSequence;
        questionSeq = questionSequence;
        $("." + questionSeq).bind("click", function () {
            selId = this.id;
            if (exclusiveId == selId) /*Exclusive selected*/ {
                if (clearAllAnswers)
                    questionSeqClass = QValidation.getQuestionSeqClassFromList(selId); //get QI class so you can select rest of answers..
                else
                    questionSeqClass = questionSequence;
                $("." + questionSeqClass).each(function () {
                    if ($(this)[0].checked && $(this)[0].id != exclusiveId) {
                        $(this)[0].click();
                    }
                });
            }
            else {
                if ($("#" + exclusiveId)[0].checked) {
                        $("#" + exclusiveId)[0].click();
                }
            }
        });
    },
    getQuestionSeqClassFromList: function(id)
    {
        returnClass = "";
        var classList = $("#" + id)[0].className.split(/\s+/);
        for (var i = 0; i < classList.length; i++) {
            if (classList[i].indexOf("QI")==0) {
                returnClass = classList[i];
                break;
            }
        }
        return returnClass;
    },
    chkMatrixExclusiveCol: function (aObj, id, ExCol) {
        //Blue button implementation of excelusive col
        //$(".Q3A1").bind("click", function () {
        //    QValidation.testMatrixSelection(this, "Q3A1", 1);
        //});
        selected = 0;
        thisId = $(aObj)[0].id;
        len = $("." + id).length;
        for (var ix = 0; ix < len; ix++) {
            if ($("." + id)[ix].checked)
                selected++;
        }
        //
        exColSelected = false;
        len = $("." + id).length;
        if ($("." + id)[ExCol].checked)
            exColSelected = true;
        //have to use disable and enable click events not reliable
        //
        if (m_BlueButtons && selected>0) {
            for (var ix = 0; ix < len; ix++) {
                cId = $("." + id)[ix].id;
                if (thisId != cId) {
                    if (exColSelected) {
                        if (ExCol != ix &&  !$("#" + cId)[0].disabled)
                            $("#" + cId).iCheck('disable');
                    }
                    else {
                        if (ExCol == ix && !$("#" + cId)[0].disabled)
                            $("#" + cId).iCheck('disable');
                    }
                }
            }
        }
        else
        {
            for (var ix = 0; ix < len; ix++) {
                cId = $("." + id)[ix].id;
                if (thisId != cId && $("#" + cId)[0].disabled)
                    $("#" + cId).iCheck('enable');
            }
        }
    },
    countChkCollection: function(id) {
        selected = 0;
        len = $("." + id).length;
        for (var ix = 0; ix < len; ix++) {
            if ($("." + id)[ix].checked)
                selected++;
        }
        return selected;
    },
    //Set likert column
    setErrorLktCol: function(questionid, questionText) {
        aRes = '';
        if (ErrorStyleType == 0)
            aRes = "  <SPAN class='clsErrorMsg'><font size=2 Color=" + SurveyErrorColor + "><u><a style='cursor:hand' onclick=\"\">"
			    + questionText + setDot(questionText) + '</a></u> &nbsp;' + SurveyColRequired + '</font></span></br>';
        else {
            if (questionid.indexOf("_")>-1)
                PageError.addQuestionErrorInLine(questionid.split("_")[1], SurveyColRequired);
            else
                PageError.addQuestionErrorInLine(questionid, SurveyColRequired);
        }
        return aRes;
    },
    setLKTHeadingError: function(hId) {
        try {
            $("." + hId)[0].style.borderLeft = SurveyErrorDec;
        }
        catch (e) {
        }
    },
    resetLKTHeadingError: function(hId) {
        try {
            $("." + hId)[0].style.borderLeft = "";
        }
        catch (e) {
        }
    }
}
//
// End Survey page object
//
var inLineErrorCount = 0;
var PageError = {
    errorToast: function(msg) {
        tPos = "toast-top-right";
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": false,
            "positionClass": "toast-bottom-full-width",
            "preventDuplicates": true,
            "onclick": null,
            "showDuration": "1000",
            "hideDuration": "1000",
            "timeOut": "9000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }
        toastr.error(msg);
    },
    add: function(name, msg) {
        aObj = getElement(name);
        //aObj.value = '';
        if (cErrorsCount < cErrors.length) {
            if (aObj.id.length > 0)
                foundm = checkItem(aObj.id);
            else
                foundm = checkItem(aObj.name);
            if (!foundm) {
                cErrorsCount = cErrorsCount + 1;
                cErrors[cErrorsCount] = msg;
                if (aObj.id.length > 0)
                    cErrorsObj[cErrorsCount] = aObj.id;
                else
                    cErrorsObj[cErrorsCount] = aObj.name;
            }
        }
    },
    addQuestionErrorInLine: function(qid, msg) {
        inLineErrorCount++;
        if (cErrorsCount < cErrors.length) {
            foundm = checkItem(qid);
            if (!foundm) {
                errLocation = "";
               //if (inLineErrorCount == 1) //first error
               //    errLocation = '<a name="ErrLoc_' + inLineErrorCount + ' id="' + inLineErrorCount + '"></a>'
                $("#err_" + qid).html(msg + errLocation);
                $("#err_" + qid).css('display', 'block');
                if (inLineErrorCount == 1) //scroll to first error
                {
                    try { $(document).scrollTop($("#err_" + qid).offset().top); } catch (e) { }
                }
            }
        }
    },
    addQuestionError: function(qid, msg) {
        if (ErrorStyleType == 10) //inline errors
            PageError.addQuestionErrorInLine(qid, msg)
        else {
            if (cErrorsCount < cErrors.length) {
                foundm = checkItem(qid);
                if (!foundm) {
                    cErrorsCount = cErrorsCount + 1;
                    cErrors[cErrorsCount] = msg;
                    cErrorsObj[cErrorsCount] = qid;
                    cErrorsType[cErrorsCount] = "Q";
                }
            }
        }
    },
    clearInLineErrors: function() {
        inLineErrorCount = 0;
        $(".errInline").each(function(index) {
            $(this).html("");
            $(this).hide();
        });
        $(".errInlineFormElements").each(function (index) {
            rmvFormElementStyle($(this)[0].name);
        });
    },
    checkItem: function(aid) {
        foundm = false;
        //remove error item from list
        for (ix = 0; ix < cErrors.length; ix++) {
            if (cErrorsObj[ix].length > 0) {
                if (cErrorsObj[ix] == aid)
                    foundm = true;
            }
        }
        return foundm;
    },
    removeErrorItem: function(id) {
        //remove error item from list
        for (ix = 0; ix < cErrors.length; ix++) {
            if (cErrorsObj[ix].length > 0) {
                if (cErrorsObj[ix] == id) {
                    cErrors[ix] = '';
                    cErrorsObj[ix] = '';
                }
            }
        }
    }
}
var Utilities = {
    deDuplicateArray: function(original) {
        var compressed = [];
        // make a copy of the input array
        var copy = original.slice(0);

        // first loop goes over every element
        for (var i = 0; i < original.length; i++) {

            var myCount = 0;
            // loop over every element in the copy and see if it's the same
            for (var w = 0; w < copy.length; w++) {
                if (original[i] == copy[w]) {
                    // increase amount of times duplicate is found
                    myCount++;
                    // sets item to undefined
                    delete copy[w];
                }
            }

            if (myCount > 0) {
                var a = new Object();
                a.value = original[i];
                a.count = myCount;
                compressed.push(a);
            }
        }
        return compressed;
    }
}
//
// Question click event validation
//
var QEvents = {
    //likert matrix question with none as the last element make sure it cannot be selected with any others
    exclusive: function(aid, headValue) {
        if (headValue) {
            if (headValue.length == 0)
                headValue = 'none';
        }
        else
            headValue = 'none';
        //last element is none which cannot be selected with another value
        ansRow = Survey.fieldValue('Checkl_' + aid)
        if (ansRow[ansRow.length - 1].checked) {
            for (ix = 0; ix < ansRow.length; ix++) {
                if (ix != ansRow.length - 1 && ansRow[ix].checked) {
                    alert(headValue + ' ' + SurveyLilertMatrix);
                    ansRow[ansRow.length - 1].checked = false;
                    break;
                }
            }
        }
    },
    //likert matrix question with none as the last element make sure it cannot be selected with any others
    //use question seq to get column heading
    exclusiveQuestSeq: function(aid, QuestSeq, ColSeq) {
        if (ColSeq == "")
            ColSeq = 2
        headValue = $(".lmQ" + QuestSeq + "Col" + ColSeq)[0].innerText;
        //last element is none which cannot be selected with another value
        ansRow = Survey.fieldValue('Checkl_' + aid)
        if (ansRow[ansRow.length - 1].checked) {
            for (ix = 0; ix < ansRow.length; ix++) {
                if (ix != ansRow.length - 1 && ansRow[ix].checked) {
                    alert(headValue + ' ' + SurveyLilertMatrix);
                    ansRow[ansRow.length - 1].checked = false;
                    break;
                }
            }
        }
    }
}
var surveyStateData = jQuery.parseJSON('{"isloaded":"false"}');
var SurveyState = {
    load: function() {
        if (surveyStateData["isloaded"] == "false") {
            surveyStateData = jQuery.parseJSON(Survey.fieldValue("__SData").value);
            surveyStateData["isloaded"] = true;
        }
    },
    serialize: function() {
        Survey.fieldValue("__SData").value = $.toJSON(surveyStateData);
    },
    getApiData: function(Name) {
        retValue = "";
        SurveyState.load();
        if (Name.toLowerCase() == "totalerror" || Name.toLowerCase() == "errortext") {
            if (surveyStateData.apidata[Name.toLowerCase()] != undefined)
                retValue = surveyStateData.apidata[Name.toLowerCase()];
        }
        else {
            if (surveyStateData.apidata.data[Name.toLowerCase()])
                retValue = surveyStateData.apidata.data[Name.toLowerCase()];
        }
        return retValue;
    },
    getValue: function(Name) {
        Name = Name.toLowerCase().replace("__", "nt");//reference internal starts with "__" data with "nt" instead of __
        retValue = "";
        SurveyState.load();
        if (surveyStateData.data[Name])
            retValue = surveyStateData.data[Name];
        return retValue;
    },
    getSite: function() {
        Name = "ntsite"; //equates __site
        retValue = "";
        SurveyState.load();
        if (surveyStateData.data[Name])
            retValue = surveyStateData.data[Name];
        if (document.URL.indexOf("https:") > -1)
        {
            if (retValue.indexOf("https:") == -1)
               retValue = retValue.replace("http:","https:")
               
        }
        return retValue;
    },
    saveValue: function(Name, Value) {
        retValue = "";
        SurveyState.load();
        surveyStateData.data[Name.toLowerCase()] = Value;
        SurveyState.serialize();
    },
    getQueryStringValue: function(Name) {
        retValue = "";
        SurveyState.load();
        if (surveyStateData.querystring[Name.toLowerCase()])
            retValue = surveyStateData.querystring[Name.toLowerCase()];
        return retValue;
    }
}
//
// Survey Ax Tools
//
var SurveyServerSide = {
CheckDuplicateWithResponse: function(EMail, Hours, AnswerId) {
        found = false;
        var parms =
                 '{ Organization: "' + SurveyState.getValue("ntOx") + '",' +
                 '  SurveyId: "' + SurveyState.getValue("ntSurveyId") + '",' +
                 '  InstanceId: "' + SurveyState.getValue("ntInstanceId") + '",' +
                 '  EMail: "' + EMail + '",' +
                 '  Hours: ' + Hours + ',' +
                 '  AnswerId: "' + AnswerId + '" }';
        $.ajax({
            type: "POST",
            url: SurveyState.getSite() + "/WebServices/SRRunTools.asmx/CheckDuplicateWithResponse",
            data: parms,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,  //this may not be supported in future versions of jquery
            success: function(msg) {
                if (msg.d.Result.TotalErrors == 0)
                    found = msg.d.ResponseFound;
                else {
                    for (var ix = 0; ix < msg.d.Result.ErrorMessages.length; ix++)
                        alert(msg.d.Result.ErrorMessages[ix].Description);
                }
            },
            error: function(xhr, status, error) {
                // Display a generic error for now.
                alert(xhr);
            }
        });
        return found;
    },
    CheckCompletesDuplicateWithResponse: function(EMail, Hours, AnswerId) {
        found = false;
        var parms =
                 '{ Organization: "' + SurveyState.getValue("ntOx") + '",' +
                 '  SurveyId: "' + SurveyState.getValue("ntSurveyId") + '",' +
                 '  InstanceId: "' + SurveyState.getValue("ntInstanceId") + '",' +
                 '  EMail: "' + EMail + '",' +
                 '  Hours: ' + Hours + ',' +
                 '  AnswerId: "' + AnswerId + '" }';
        $.ajax({
            type: "POST",
            url: SurveyState.getSite() + "/WebServices/SRRunTools.asmx/CheckCompletesDuplicateWithResponse",
            data: parms,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,  //this may not be supported in future versions of jquery
            success: function(msg) {
                if (msg.d.Result.TotalErrors == 0)
                    found = msg.d.ResponseFound;
                else {
                    for (var ix = 0; ix < msg.d.Result.ErrorMessages.length; ix++)
                        alert(msg.d.Result.ErrorMessages[ix].Description);
                }
            },
            error: function(xhr, status, error) {
                // Display a generic error for now.
                alert(xhr);
            }
        });
        return found;
    },
    CountDemoGraphicData: function (FormElement) {
        var returnCollection = [];
        var parms =
                 '{ Organization: "' + SurveyState.getValue("ntOx") + '",' +
                 '  SurveyId: "' + SurveyState.getValue("ntSurveyId") + '",' +
                 '  FormElement: "' + FormElement + '",' +
                 '  Value: "' + '' + '" }';
        $.ajax({
            type: "POST",
            url: SurveyState.getSite() + "/WebServices/SRRunTools.asmx/CountDemoGraphicDataValue",
            data: parms,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,  //this may not be supported in future versions of jquery
            success: function (msg) {
                if (msg.d.Result.TotalErrors == 0) {
                    $.each(msg.d.ResponseCollection, function () {
                        returnCollection.push({ 'name': this.Name, 'value': this.Count });
                    });
                }
                else {
                    for (var ix = 0; ix < msg.d.Result.ErrorMessages.length; ix++)
                        alert(msg.d.Result.ErrorMessages[ix].Description);
                }
                ;
            },
            error: function (xhr, status, error) {
                // Display a generic error for now.
                alert(xhr);
            }
        });
        return returnCollection;
    },
    CheckDuplicateEmail: function(EMail, Hours, CheckIncompletes) {
        found = false;
        var parms =
                 '{ Organization: "' + SurveyState.getValue("ntOx") + '",' +
                 '  SurveyId: "' + SurveyState.getValue("ntSurveyId") + '",' +
                 '  InstanceId: "' + SurveyState.getValue("ntInstanceId") + '",' +
                 '  EMail: "' + EMail + '",' +
                 '  Hours: ' + Hours + ',' +
                 '  CheckIncompletes: ' + CheckIncompletes + ' }';
        $.ajax({
            type: "POST",
            url: SurveyState.getSite() + "/WebServices/SRRunTools.asmx/CheckDuplicateEmail",
            data: parms,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,  //this may not be supported in future versions of jquery
            success: function(msg) {
                if (msg.d.Result.TotalErrors == 0)
                    found = msg.d.ResponseFound;
                else {
                    for (var ix = 0; ix < msg.d.Result.ErrorMessages.length; ix++)
                        alert(msg.d.Result.ErrorMessages[ix].Description);
                }
            },
            error: function(xhr, status, error) {
                // Display a generic error for now.
                alert(xhr);
            }
        });
        return found;
    },
    CheckDuplicateEmailIncludeQueue: function (EMail, Hours) {
        found = false;
        var parms =
                 '{ Organization: "' + SurveyState.getValue("ntOx") + '",' +
                 '  SurveyId: "' + SurveyState.getValue("ntSurveyId") + '",' +
                 '  InstanceId: "' + SurveyState.getValue("ntInstanceId") + '",' +
                 '  EMail: "' + EMail + '",' +
                 '  Hours: ' + Hours + '}';
        $.ajax({
            type: "POST",
            url: SurveyState.getSite() + "/WebServices/SRRunTools.asmx/CheckDuplicateEmailIncludeQueue",
            data: parms,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,  //this may not be supported in future versions of jquery
            success: function (msg) {
                if (msg.d.Result.TotalErrors == 0)
                    found = msg.d.ResponseFound;
                else {
                    for (var ix = 0; ix < msg.d.Result.ErrorMessages.length; ix++)
                        alert(msg.d.Result.ErrorMessages[ix].Description);
                }
            },
            error: function (xhr, status, error) {
                // Display a generic error for now.
                alert(xhr);
            }
        });
        return found;
    },
    IfExistsExternalVal: function(Table, Field, Value) {
        found = false;
        var parms =
                 '{ Organization: "' + SurveyState.getValue("ntOx") + '",' +
                 '  Table: "' + Table + '",' +
                 '  Field: "' + Field + '",' +
                 '  Value: "' + Value + '" }';
        $.ajax({
            type: "POST",
            url: SurveyState.getSite() + "/WebServices/SRRunTools.asmx/IfExistsExtValidation",
            data: parms,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,  //this may not be supported in future versions of jquery
            success: function(msg) {
                if (msg.d.Result.TotalErrors == 0)
                    found = msg.d.ResponseFound;
                else {
                    for (var ix = 0; ix < msg.d.Result.ErrorMessages.length; ix++)
                        alert(msg.d.Result.ErrorMessages[ix].Description);
                }
            },
            error: function(xhr, status, error) {
                // Display a generic error for now.
                alert(xhr);
            }
        });
        return found;
    }
}
//
// Survey Form
//
var SurveyForm = {
    isEmail: function(email) {
        valid = false;
        var Regx = /^[\w\.\-\']+\@[\w\.\-\']+\.[\w.]{2,}$/;
        var RegxE = /[\.@|@\.]/;  //check for .@ and @.
        if (Regx.test(email)
            && email.indexOf('.@') == -1
            && email.indexOf('@.') == -1
            && email.substr(email.length - 1) != ".")
            valid = true;
        return valid;
    },
    addFormField: function(fieldName,Value,hidden) {
        //var $hiddenInput = $("<input/>", { type: "text", id: fieldName, name: fieldName, value: Value });
        //$hiddenInput.appendTo("#SurveyForm");
    },
    isNumber: function(number) {
        isNum = true;
        try {
            intVal = parseInt(number);
            if (isNaN(intVal))
                isNum = false;
        }
        catch (e) { isNum = false; }
        return isNum;
    },
    isMDY: function(strValue) {
        var objRegExp = /^\d{1,2}(\-|\/|\.)\d{1,2}\1\d{4}$/
        //check to see if in correct format
        if (!objRegExp.test(strValue))
            return false; //doesn't match pattern, bad date
        else {
            var RegxSep = /[^0-9]/;
            var strSeparator = RegxSep.exec(strValue);
            var arrayDate = strValue.split(strSeparator);
            //create a lookup for months not equal to Feb.
            var arrayLookup = {
                '01': 31, '1': 31,
                '03': 31, '3': 31,
                '04': 30, '4': 30,
                '05': 31, '5': 31,
                '06': 30, '6': 30,
                '07': 31, '7': 31,
                '08': 31, '8': 31,
                '09': 30, '9': 30,
                '10': 31, '11': 30, '12': 31
            }
            var intDay = parseInt(arrayDate[1], 10);

            //check if month value and day value agree
            if (arrayLookup[arrayDate[0]] != null) {
                if (intDay <= arrayLookup[arrayDate[0]] && intDay != 0)
                    return true; //found in lookup table, good date
            }
            var intMonth = parseInt(arrayDate[0], 10);
            if (intMonth == 2) {
                var intYear = parseInt(arrayDate[2]);
                if (intDay > 0 && intDay < 29) {
                    return true;
                }
                else if (intDay == 29) {
                    if ((intYear % 4 == 0) && (intYear % 100 != 0) ||
                     (intYear % 400 == 0)) {
                        // year div by 4 and ((not div by 100) or div by 400) ->ok
                        return true;
                    }
                }
            }
        }
        return false; //any other values, bad date
    },
    isYMD: function(strValue) {
        var objRegExp = /^\d{4}(\-|\/|\.)\d{1,2}\1\d{1,2}$/
        //check to see if in correct format
        if (!objRegExp.test(strValue))
            return false; //doesn't match pattern, bad date
        else {
            var strSeparator = strValue.substring(4, 5)
            var arrayDate = strValue.split(strSeparator);
            //create a lookup for months not equal to Feb.
            var arrayLookup = {
                '01': 31, '1': 31,
                '03': 31, '3': 31,
                '04': 30, '4': 30,
                '05': 31, '5': 31,
                '06': 30, '6': 30,
                '07': 31, '7': 31,
                '08': 31, '8': 31,
                '09': 30, '9': 30,
                '10': 31, '11': 30, '12': 31
            }
            var intDay = parseInt(arrayDate[2], 10);

            //check if month value and day value agree
            if (arrayLookup[arrayDate[1]] != null) {
                if (intDay <= arrayLookup[arrayDate[1]] && intDay != 0)
                    return true; //found in lookup table, good date
            }
            var intMonth = parseInt(arrayDate[1], 10);
            if (intMonth == 2) {
                var intYear = parseInt(arrayDate[0]);
                if (intDay > 0 && intDay < 29) {
                    return true;
                }
                else if (intDay == 29) {
                    if ((intYear % 4 == 0) && (intYear % 100 != 0) ||
                     (intYear % 400 == 0)) {
                        // year div by 4 and ((not div by 100) or div by 400) ->ok
                        return true;
                    }
                }
            }
        }
        return false; //any other values, bad date
    },
    isDMY: function(strValue) {
        var objRegExp = /^\d{1,2}(\-|\/|\.)\d{1,2}\1\d{4}$/
        //check to see if in correct format
        if (!objRegExp.test(strValue))
            return false; //doesn't match pattern, bad date
        else {
            var RegxSep = /[^0-9]/;
            var strSeparator = RegxSep.exec(strValue);
            var arrayDate = strValue.split(strSeparator);
            //create a lookup for months not equal to Feb.
            var arrayLookup = {
                '01': 31, '1': 31,
                '03': 31, '3': 31,
                '04': 30, '4': 30,
                '05': 31, '5': 31,
                '06': 30, '6': 30,
                '07': 31, '7': 31,
                '08': 31, '8': 31,
                '09': 30, '9': 30,
                '10': 31, '11': 30, '12': 31
            }
            var intDay = parseInt(arrayDate[0], 10);

            //check if month value and day value agree
            if (arrayLookup[arrayDate[1]] != null) {
                if (intDay <= arrayLookup[arrayDate[1]] && intDay != 0)
                    return true; //found in lookup table, good date
            }
            var intMonth = parseInt(arrayDate[1], 10);
            if (intMonth == 2) {
                var intYear = parseInt(arrayDate[2]);
                if (intDay > 0 && intDay < 29) {
                    return true;
                }
                else if (intDay == 29) {
                    if ((intYear % 4 == 0) && (intYear % 100 != 0) ||
                     (intYear % 400 == 0)) {
                        // year div by 4 and ((not div by 100) or div by 400) ->ok
                        return true;
                    }
                }
            }
        }
        return false; //any other values, bad date
    },
    getAge: function(date, format) {

    },
    setDateFormat: function(dateSep) {
        if (dateSep != '/' && dateSep != '.' && dateSep != '-')
            alert("Date separator must be / . - ")
        else
            Survey.fieldValue('__DateSep').value = dateSep;
    },
    addWaterMark: function(textbox, watermarktext) {
        if (textbox.substring(0, 1) != '#')
            textbox = '#' + textbox
        $(textbox).addClass("watermarkOn").val(watermarktext);
        $(textbox).val(watermarktext);
        $(textbox).focus(function() {
            $(this).filter(function() {
                return $(this).val() == "" || $(this).val() == watermarktext
            }).removeClass("watermarkOn").val("");
        });
        $(textbox).blur(function() {
            $(this).filter(function() {
                return $(this).val() == ""
            }).addClass("watermarkOn").val(watermarktext);
        });
    },
    autoPopulate: function(formElement, value) {

        if (Survey.fieldValue(formElement))
            Survey.fieldValue(formElement).value = value;
        else {
            $('<input>').attr({ type: 'hidden', id: formElement, name: formElement }).appendTo('form');
        }
    },
    escapeJSON: function (str) {
        return str
          .replace(/[\\]/g, '\\\\')
          .replace(/[\"]/g, '\\\"')
          .replace(/[\/]/g, '\\/')
          .replace(/[\b]/g, '\\b')
          .replace(/[\f]/g, '\\f')
          .replace(/[\n]/g, '\\n')
          .replace(/[\r]/g, '\\r')
          .replace(/[\t]/g, '\\t');
    },
    brightVerifyEmail: function (userName, emailAddressField) {
        emailA = Survey.fieldValue(emailAddressField).value;
        if (emailA.length == 0)
            return;
        $.ajax({
            url: "https://bpi.briteverify.com/emails/verify.js",
            // The name of the callback parameter, as specified by the YQL service
            jsonp: "callback",
            // Tell jQuery we're expecting JSONP
            dataType: "jsonp",
            // Tell YQL what we want and that we want JSON
            data: {
                username: userName,
                "email[address]": emailA
            },
            // Work with the response
            success: function (response) {
                var aResponse = response.email;
                // console.log(aResponse); // server response
                 if (aResponse.status == "invalid") {
                    $("#" + emailAddressField + "_status").addClass("bvError bvErrorHardStop");
                    $("#" + emailAddressField + "_status").html(m_briteVerifyFailedStatus);
                    return false;
                }
                else {
                    $("#" + emailAddressField + "_status").removeClass("bvError bvErrorHardStop");
                    $("#" + emailAddressField + "_status").html(m_briteVerifyOkStatus);
                    return true;
                }
            },
            error: function (msg) {
                alert('error');
                return true;
            }
        });
    },
    brightVerifyFirstName: function (userName, aFirstNameField) {
        aFirstName = Survey.fieldValue(aFirstNameField).value;
        /*call add verify*/
        $.ajax({
            url: "https://bpi.briteverify.com/names/verify.js?first=" + aFirstName,
            // The name of the callback parameter, as specified by the YQL service
            jsonp: "callback",
            // Tell jQuery we're expecting JSONP
            dataType: "jsonp",
            // Tell YQL what we want and that we want JSON
            data: {
                username: userName
            },
            // Work with the response
            success: function (response) {
                var aResponse = response.name;
                console.log(aResponse); // server response
                if (aResponse.status != "invalid") {
                    if (aFirstName.length > 0) {
                        $("#" + aFirstNameField + "_status").removeClass("bvError bvErrorHardStop");
                        $("#" + aFirstNameField + "_status").html(m_briteVerifyOkStatus);
                    }
                    return true;
                }
                else {
                    if (aFirstName.length > 0) {
                        $("#" + aFirstNameField + "_status").addClass("bvError bvErrorHardStop");
                        $("#" + aFirstNameField + "_status").html(m_briteVerifyFailedStatus);
                    }
                    return false;
                }
            },
            error: function (msg) {
                alert('error');
                return true;
            }
        });
    },
    brightVerifyLastName: function (userName, aLastNameField) {
        aLastName = Survey.fieldValue(aLastNameField).value;
        /*call add verify*/
        $.ajax({
            url: "https://bpi.briteverify.com/names/verify.js?last=" + aLastName,
            // The name of the callback parameter, as specified by the YQL service
            jsonp: "callback",
            // Tell jQuery we're expecting JSONP
            dataType: "jsonp",
            // Tell YQL what we want and that we want JSON
            data: {
                username: userName
            },
            // Work with the response
            success: function (response) {
                var aResponse = response.name;
                console.log(aResponse); // server response
                if (aResponse.status != "invalid") {
                    if (aLastName.length > 0) {
                        $("#" + aLastNameField + "_status").removeClass("bvError bvErrorHardStop");
                        $("#" + aLastNameField + "_status").html(m_briteVerifyOkStatus);
                    }
                    return true;
                }
                else {
                    if (aLastName.length > 0) {
                        $("#" + aLastNameField + "_status").addClass("bvError bvErrorHardStop");
                        $("#" + aLastNameField + "_status").html(m_briteVerifyFailedStatus);
                    }
                    return false;
                }
            },
            error: function (msg) {
                alert('error');
                return true;
            }
        });
    },
    brightVerifyName: function (userName, aFirstNameField, aLastNameField) {
        if (aFirstNameField.length > 0)
            aFirstName = Survey.fieldValue(aFirstNameField).value;
        else
            aFirstName = "";
        if (aLastNameField.length > 0)
            aLastName = Survey.fieldValue(aLastNameField).value;
        else
            aLastName = "";
        aUrl = "https://bpi.briteverify.com/names/verify.js";
        /*call add verify*/
        $.ajax({
            url: aUrl,
            // The name of the callback parameter, as specified by the YQL service
            jsonp: "callback",
            // Tell jQuery we're expecting JSONP
            dataType: "jsonp",
            // Tell YQL what we want and that we want JSON
            data: {
                username: userName,
                "name[fullname]": aFirstName + " " + aLastName
            },
            // Work with the response
            success: function (response) {
                var aResponse = response.name;
                console.log(aResponse); // server response
                isInError = false;
                if (aResponse.errors) {
                    switch (aResponse.errors[0][1]) {
                        case "Contains non alphabetic":
                            isInError = true;
                            break;
                        case "Contains vulgarity":
                            isInError = true;
                            break;
                        case "Contains nuisance name":
                            isInError = true;
                            break;
                    }
                }
                if (!isInError) {
                    if (aFirstName.length > 0) {
                        $("#" + aFirstNameField + "_status").removeClass("bvError bvErrorHardStop");
                        $("#" + aFirstNameField + "_status").html(m_briteVerifyOkStatus);
                    }
                    if (aLastName.length > 0) {
                        $("#" + aLastNameField + "_status").removeClass("bvError bvErrorHardStop");
                        $("#" + aLastNameField + "_status").html(m_briteVerifyOkStatus);
                    }
                    return true;
                }
                else {
                    if (aFirstName.length > 0) {
                        $("#" + aFirstNameField + "_status").addClass("bvError bvErrorHardStop");
                        $("#" + aFirstNameField + "_status").html(m_briteVerifyFailedStatus);
                    }
                    if (aLastName.length > 0) {
                        $("#" + aLastNameField + "_status").html(m_briteVerifyFailedStatus);
                        $("#" + aLastNameField + "_status").addClass("bvError bvErrorHardStop");
                    }
                    return false;
                }
            },
            error: function (msg) {
                alert('error');
                return true;
            }
        });
    },
    brightVerifyFullName: function (userName, aFirstNameField, aLastNameField) {
        if (aFirstNameField.length > 0)
            aFirstName = Survey.fieldValue(aFirstNameField).value;
        else
            aFirstName = "";
        if (aLastNameField.length > 0)
            aLastName = Survey.fieldValue(aLastNameField).value;
        else
            aLastName = "";
        if (aLastName.length == 0 || aFirstName === 0)
            return;
        aUrl = "https://bpi.briteverify.com/names/verify.js";
        /*call add verify*/
        $.ajax({
            url: aUrl,
            // The name of the callback parameter, as specified by the YQL service
            jsonp: "callback",
            // Tell jQuery we're expecting JSONP
            dataType: "jsonp",
            // Tell YQL what we want and that we want JSON
            data: {
                username: userName,
                "name[fullname]": aFirstName + " " + aLastName
            },
            // Work with the response
            success: function (response) {
                var aResponse = response.name;
                console.log(aResponse); // server response
                isInError = false;
                if (aResponse.errors) {
                    switch (aResponse.errors[0][1]) {
                        case "Contains non alphabetic":
                            isInError = true;
                            break;
                        case "Contains vulgarity":
                            isInError = true;
                            break;
                        case "Contains nuisance name":
                            isInError = true;
                            break;
                    }
                }
                if (!isInError) {
                    if (aFirstName.length > 0) {
                        $("#" + aFirstNameField + "_status").removeClass("bvError bvErrorHardStop");
                        $("#" + aFirstNameField + "_status").html(m_briteVerifyOkStatus);
                    }
                    if (aLastName.length > 0) {
                        $("#" + aLastNameField + "_status").removeClass("bvError bvErrorHardStop");
                        $("#" + aLastNameField + "_status").html(m_briteVerifyOkStatus);
                    }
                    return true;
                }
                else {
                    if (aFirstName.length > 0) {
                        $("#" + aFirstNameField + "_status").addClass("bvError bvErrorHardStop");
                        $("#" + aFirstNameField + "_status").html(m_briteVerifyFailedStatus);
                    }
                    if (aLastName.length > 0) {
                        $("#" + aLastNameField + "_status").html(m_briteVerifyFailedStatus);
                        $("#" + aLastNameField + "_status").addClass("bvError bvErrorHardStop");
                    }
                    return false;
                }
            },
            error: function (msg) {
                alert('error');
                return true;
            }
        });
    },
    brightVerifyGetValue: function (aField) {
        switch ($("#" + aField)[0].tagName.toLowerCase()) {
            case "select":
                return $("#" + aField).val();
                break;
            default:
                return $("#" + aField)[0].value;
                break;
        }
    },
    brightVerifyAddress: function (userName, aStreetField, aUnitField, aCityField, aStateField, aZipField) {
        /*Validate postal address*/
        aStreet = SurveyForm.brightVerifyGetValue(aStreetField);
        aUnit = SurveyForm.brightVerifyGetValue(aUnitField);
        aCity = SurveyForm.brightVerifyGetValue(aCityField);
        aState = SurveyForm.brightVerifyGetValue(aStateField);
        aZip = SurveyForm.brightVerifyGetValue(aZipField);
        if (aZip.length == 0 || aStreet.length == 0)
            return;
        //
        //if (SurveyState.getValue("achk") != '1') {
        $.ajax({
            url: "https://bpi.briteverify.com/addresses/verify.js",
            // The name of the callback parameter, as specified by the YQL service
            jsonp: "callback",
            // Tell jQuery we're expecting JSONP
            dataType: "jsonp",
            // Tell YQL what we want and that we want JSON
            data: {
                username: userName,
                "address[street]": aStreet,
                "address[unit]": aUnit,
                "address[zip]": aZip,
                "address[city]": aCity,
                "address[state]": aState
            },
            // Work with the response
            success: function (response) {
                //SurveyState.saveValue("achk", "1");
                var aResponse = response.address;
                console.log(aResponse); // server response
                if (aResponse.status == "valid") {
                    if (aStreet != aResponse.street && aResponse.street.length > 0)
                        Survey.fieldValue(aStreetField).value = aResponse.street;
                    if (aUnit != aResponse.unit && aResponse.unit.length > 0)
                        Survey.fieldValue(aUnitField).value = aResponse.unit;
                    if (aCity != aResponse.city && aResponse.city.length > 0)
                        Survey.fieldValue(aCityField).value = aResponse.city;
                    if (aState != aResponse.state && aResponse.state.length > 0)
                        $("#" + aStateField).val(aResponse.state);
                    if (aZip != aResponse.zip && aResponse.zip.length > 0)
                        Survey.fieldValue(aZipField).value = aResponse.zip;
                    $("#" + aStreetField + "_status").removeClass("bvError");
                    $("#" + aStreetField + "_status").html(m_briteVerifyOkStatus);
                    return true;
                }
                else {
                    $("#" + aStreetField + "_status").addClass("bvError");
                    $("#" + aStreetField + "_status").html(m_briteVerifyFailedStatus);
                    return false;
                }
            },
            error: function (msg) {
                alert('error');
                return true;
            }
        });
    }
}

